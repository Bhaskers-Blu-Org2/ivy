#lang ivy1.7

# a fake deserializer for quic

object quic_deser = {}

<<< member

    class `quic_deser`;

>>>

<<< impl

    class `quic_deser` : public ivy_binary_deser {
        enum {quic_s_init,
              quic_s_type,
              quic_s_version,
	      quic_s_dcil,
	      quic_s_scil,
              quic_s_dcid,
              quic_s_scid,
              quic_s_retry_token_length,
              quic_s_retry_token,
	      quic_s_payload_length,
              quic_s_pkt_num,
              quic_s_payload,
              quic_stream_id,
              quic_stream_off,
              quic_stream_len,
              quic_stream_fin,
              quic_stream_offset,
              quic_stream_length,
              quic_stream_data,
              quic_ack_largest,
              quic_ack_delay,
              quic_ack_block_count,
              quic_ack_gap,
              quic_ack_block,
              quic_reset_stream_id,
              quic_reset_err_code,
              quic_reset_final_offset,
              quic_connection_close_err_code,
              quic_connection_close_reason_length,
              quic_connection_close_reason,
              quic_max_stream_data_id,
              quic_s_done} state;
        bool long_format;
        char hdr_type;
        int dcil;
        int scil;
        char frame_type;
        int data_remaining;
        long long ack_blocks_expected;
        long long ack_block_count;

    public:
        quic_deser(const std::vector<char> &inp) : ivy_binary_deser(inp),state(quic_s_init) {
            // pos = 42; // skip 42 bytes of IP and UDP header
        }
        virtual void  get(long long &res) {
            switch (state) {
            case quic_s_init:
            {
                getn(res,1);
                long_format = (res & 0x80) ? true : false;
                hdr_type = res & 0x7f;
                res = long_format;
                state = quic_s_type;
            }
            break;
            case quic_s_type:
            {
                res = hdr_type;
                state = quic_s_version;
            }
            break;
            case quic_s_version:
            {
                if (long_format)
                    ivy_binary_deser::getn(res,4);
                else
                    res = 0;
                state = quic_s_dcil;
            }
            break;
            case quic_s_dcil:
            {
                getn(res,1);
		scil = res & 0xf;
                dcil = (res & 0xf0) >> 4;
		res = dcil;
                state = quic_s_scil;
            }
            break;
            case quic_s_scil:
            {
		res = scil;
                state = quic_s_dcid;
            }
            break;
            case quic_s_dcid:
            {
		getn(res,(dcil ? (dcil+3) : 0));
                state = quic_s_scid;
            }
            break;
            case quic_s_scid:
            {
		getn(res,(scil ? (scil+3) : 0));
                state = quic_s_retry_token_length;
            }
            break;
            case quic_s_payload_length:
            {
                get_var_int(res);
                state = quic_s_pkt_num;
            }
            break;
            case quic_s_pkt_num:
            {
                ivy_binary_deser::getn(res,(long_format || (hdr_type & 0x1f) == 0x1d) ? 4 : (hdr_type & 0x1f) == 0x1e ? 2 : 1);
                state = quic_s_payload;
            }
            break;
            case quic_stream_off:
            {
                res = (0x04 & frame_type) ? 1 : 0;
                state = quic_stream_len;
            }
            break;
            case quic_stream_len:
            {
                res = (0x02 & frame_type) ? 1 : 0;
                state = quic_stream_fin;
            }
            break;
            case quic_stream_fin:
            {
                res = (0x01 & frame_type) ? 1 : 0;
                state = quic_stream_id;
            }
            break;
            case quic_stream_id:
            {
                get_var_int(res);
                state = quic_stream_offset;
            }
            break;
            case quic_stream_offset:
            {
                if (0x04 & frame_type)
                    get_var_int(res);
                else res = 0;
                state = quic_stream_length;
            }
            break;
            case quic_stream_length:
            {
                if (0x02 & frame_type)
                    get_var_int(res);
                else res = 0;
                data_remaining = res;
                state = quic_stream_data;
            }
            break;
            case quic_stream_data:
            case quic_connection_close_reason:
            case quic_s_retry_token:
            {
                ivy_binary_deser::getn(res,1);
            }
            break;
            case quic_ack_largest:
            {
                get_var_int(res);
                state = quic_ack_delay;
            }
            break;
            case quic_ack_delay:
            {
                get_var_int(res);
                state = quic_ack_block_count;
            }
            break;
            case quic_ack_gap:
            {
                if (ack_block_count == 0)
                    res = 0; // first ack block has no gap
                else
                    get_var_int(res);
                state = quic_ack_block;
            }
            break;
            case quic_ack_block:
            {
                get_var_int(res);
                state = quic_ack_gap;
                ack_block_count++;
            }
            break;
            case quic_reset_stream_id:
            {
                get_var_int(res);
                state = quic_reset_err_code;
            }
            break;
            case quic_reset_err_code:
            {
                getn(res,2);
                state = quic_reset_final_offset;
            }
            break;
            case quic_reset_final_offset:
            {
                get_var_int(res);
            }
            break;
            case quic_connection_close_err_code:
            {
                getn(res,2);
                state = quic_connection_close_reason_length;
            }
            break;
            case quic_connection_close_reason_length:
            {
                get_var_int(res);
                data_remaining = res;
                state = quic_connection_close_reason;
            }
            break;
            case quic_max_stream_data_id:
            {
                get_var_int(res);
                state = quic_reset_final_offset;
            }
            break;
            case quic_s_retry_token_length:
            {
                if (long_format & hdr_type == 0x7f)
                    get_var_int(res);
                else res = 0;
                data_remaining = res;
                state = quic_s_retry_token;
            }
            break;
            default:
            throw deser_err();
            }
        }

        void get_var_int(long long &res) {
            static int lens[4] = {0,1,3,7};
            long long lobyte;
            ivy_binary_deser::getn(lobyte,1);
            int bytes = lens[(lobyte & 0xc0) >> 6];
            ivy_binary_deser::getn(res,bytes);
            res |= (lobyte & 0x3f) << (bytes << 3);
        }

        virtual int open_tag(const std::vector<std::string> &tags) {
            if (state == quic_s_payload) {
                long long ft;
                ivy_binary_deser::getn(ft,1);
                frame_type = ft;
                if (frame_type >= 0x10 && frame_type <= 0x17) {
                    state = quic_stream_off;
                    return 0;
                }
                if (frame_type == 0x0e) {
                    state = quic_ack_largest;
                    return 1;
                }
                if (frame_type == 0x01) {
                    state = quic_reset_stream_id;
                    return 2;
                }
                if (frame_type == 0x06) {
                    state = quic_reset_stream_id; // parser state equivalent to this
                    return 3;
                }
                if (frame_type == 0x02) {
                    state = quic_connection_close_err_code;
                    return 4;
                }
                if (frame_type == 0x05) {
                    state = quic_max_stream_data_id;
                    return 5;
                }
                if (frame_type == 0x0a) {
                    state = quic_reset_final_offset;
                    return 6;
                }
                std::cerr << "saw tag " << ft << std::endl;  
            }
            throw deser_err();
        }

        virtual bool open_list_elem() {
            if (state == quic_s_payload) {
               while (more(1) && inp[pos] == 0)
                   pos++;  // skip padding frames
               return more(1);
            }
            if (state == quic_ack_gap) {
                return ack_block_count < ack_blocks_expected;
            }
            if (state == quic_stream_data)
                return (0x02 & frame_type) ? (data_remaining-- > 0) : more(1);
            if (state == quic_connection_close_reason)
                return data_remaining-- > 0;
            if (state == quic_s_retry_token)
                return data_remaining-- > 0;
            throw deser_err();
        }

        void open_list() {
            if (state == quic_ack_block_count) {
                get_var_int(ack_blocks_expected);
                ack_blocks_expected++;  // block count doesn't include first
                ack_block_count = 0;
                state = quic_ack_gap;
            }
        }
        void close_list() {
            if (state == quic_s_retry_token) {
                state = quic_s_payload_length;
            }
        }
        void close_list_elem() {}

        virtual void close_tag() {
            state = quic_s_payload;
        }

        ~quic_deser(){}
    };

>>>
