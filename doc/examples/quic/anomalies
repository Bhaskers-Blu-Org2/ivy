Capture file: anomaly1.pcap
Implementation:
  minquic, commit ???????
Endpoints:
  - 10.0.0.1: server
  - 10.0.0.2: client
Issue:
  Client sends ack-only packet in response to an ack-only packet.
  That is the packet does not ack any packet with data that is not
  previously acked. The number of ack-only packets from client is three,
  while server has sent only two packets with data.

  This is a violation of the following section of the version 9 draft:

   8.16.2.  Sending ACK Frames

   ... Implementations MUST NOT send more than one ACK frame per received
   packet that contains frames other than ACK frames. ...

Capture file: none
Implementation:
  minquic, commit ???????
Issue:
   Server treats the case of off bit being false in stream frame of
   initial packet as an error, but it isn't clear that this violates the
   specification. Need to check this.

Capture file: none
Implementation:
  minquic, commit ???????
Ivy commit:
  39a6f6f
Issue:
  When given a large jump in packet numbers, the minquic server counts down
  from the received packet number, printing log messages, spending time
  proportional to the gap in the packet numbers. Minquic seems to assume that
  the client will simply increment packet numbers.



Capture file: picoquic.pcap
Implementation:
  picoquic
Endpoints:
  - 10.0.0.1: server
  - 10.0.0.2: client
Issue:
  Regarding the retry token, The specification, draft 14 states:

    The Initial packet has two additional header fields that follow the
    normal Long Header.

  However, picoquic is putting these fields in the middle of the long header,
  before the length and the packet number fields.

Capture file: picoquic.pcap
Implementation:
  picoquic
Endpoints:
  - 10.0.0.1: server
  - 10.0.0.2: client
Issue:
  Packet 2 is an intial packet from the server to the client in repsonse
  to Packet 1 fropm the cleint. It appears to have junk on the end. That
  is, the payload length field appears to be correct, but there is additional
  data after the end of the payload that appears to be garbage and might
  be an information leak.

  On further inspection, the junk seems to be another QUIC packet. Somehow,
  picoquic is cramming multiple QUIC packets into a single UDP packet.





