Capture file: anomaly1.pcap
Implementation:
  minquic, commit ???????
Endpoints:
  - 10.0.0.1: server
  - 10.0.0.2: client
Issue:
  Client sends ack-only packet in response to an ack-only packet.
  That is the packet does not ack any packet with data that is not
  previously acked. The number of ack-only packets from client is three,
  while server has sent only two packets with data.

  This is a violation of the following section of the version 9 draft:

   8.16.2.  Sending ACK Frames

   ... Implementations MUST NOT send more than one ACK frame per received
   packet that contains frames other than ACK frames. ...

Capture file: none
Implementation:
  minquic, commit ???????
Issue:
   Server treats the case of off bit being false in stream frame of
   initial packet as an error, but it isn't clear that this violates the
   specification. Need to check this.

Capture file: none
Implementation:
  minquic, commit ???????
Ivy commit:
  39a6f6f
Issue:
  When given a large jump in packet numbers, the minquic server counts down
  from the received packet number, printing log messages, spending time
  proportional to the gap in the packet numbers. Minquic seems to assume that
  the client will simply increment packet numbers.



Capture file: picoquic.pcap
Implementation:
  picoquic
Endpoints:
  - 10.0.0.1: server
  - 10.0.0.2: client
Issue:
  Regarding the retry token, The specification, draft 14 states:

    The Initial packet has two additional header fields that follow the
    normal Long Header.

  However, picoquic is putting these fields in the middle of the long header,
  before the length and the packet number fields.


Event file:  anomaly6.iev
Picoquic log file: anomaly6.log
QUIC version: draft 14
Ivy commit: 7bcdf6a
Implementation:
  picoquic, commit: cb34de2
Issue:
  Client sends a MAX_STREAM_ID frame with stream id 0, which is a client, not
  a server stream id. Server (picoquicdemo) responds with connection close and
  error code of STREAM_ID_ERROR. However, specification does not state that it
  is an error to send a stream id that is not an id of the peer, and does not
  state that STREAM_ID_ERROR should be returned in this case.

Event file:  anomaly7.iev
Picoquic log file: anomaly7.log
QUIC version: draft 14
Ivy commit: 4c8087e
Implementation:
  picoquic, commit: cb34de2
Issue:
  Seg fault occurs when server receives an initial packet with client
  hello handshake message followed immediately by an initial packet
  with a connection close frame. It appears that the server tries to
  send a 1rtt propected packet as a response before the packet number
  encoder for this packet type has been initialized. See picoquic issue 340.

Event file:  anomaly8.iev
Picoquic log file: anomaly8.log
QUIC version: draft 14
Ivy commit: ???????
Implementation:
  picoquic, commit: cb34de2
Issue:
  Seg fault occurs when server tries to send a packet in the draining
  state. As in the anomaly above, it appears that the server tries to
  send a 1rtt propected packet but the packet number encoder is null.

  picoquic stack trace:

#0  0x000055555557a7bd in picoquic_pn_iv_size (pn_enc=0x0) at /home/mcmillan/projects/picoquic/picoquic/tls_api.c:1345
#1  0x000055555557227f in picoquic_protect_packet (cnx=0x5555557c23e0, ptype=picoquic_packet_1rtt_protected_phi0, bytes=0x5555557c9f0d "", sequence_number=0, length=18, header_length=13, send_buffer=0x7fffffffdc00 "0", send_buffer_max=1252, aead_context=0x0, pn_enc=0x0) at /home/mcmillan/projects/picoquic/picoquic/sender.c:395
#2  0x0000555555572c4a in picoquic_finalize_and_protect_packet (cnx=0x5555557c23e0, packet=0x5555557c9ed0, ret=0, length=18, header_length=13, checksum_overhead=16, send_length=0x7fffffffd2f8, send_buffer=0x7fffffffdc00 "0", send_buffer_max=1252, path_x=0x5555557c2a80, current_time=1539114320087490) at /home/mcmillan/projects/picoquic/picoquic/sender.c:659
#3  0x000055555557617b in picoquic_prepare_packet_closing (cnx=0x5555557c23e0, path_x=0x5555557c2a80, packet=0x5555557c9ed0, current_time=1539114320087490, send_buffer=0x7fffffffdc00 "0", send_buffer_max=1252, send_length=0x7fffffffd2f8) at /home/mcmillan/projects/picoquic/picoquic/sender.c:2024
#4  0x0000555555576d68 in picoquic_prepare_segment (cnx=0x5555557c23e0, path_x=0x5555557c2a80, packet=0x5555557c9ed0, current_time=1539114320087490, send_buffer=0x7fffffffdc00 "0", send_buffer_max=1536, send_length=0x7fffffffd2f8) at /home/mcmillan/projects/picoquic/picoquic/sender.c:2314
#5  0x0000555555576f0a in picoquic_prepare_packet (cnx=0x5555557c23e0, current_time=1539114320087490, send_buffer=0x7fffffffdc00 "0", send_buffer_max=1536, send_length=0x7fffffffd398) at /home/mcmillan/projects/picoquic/picoquic/sender.c:2367
#6  0x00005555555610f1 in quic_server (server_name=0x55555559904c "::", server_port=4443, pem_cert=0x555555599028 "certs/cert.pem", pem_key=0x555555599037 "certs/key.pem", just_once=0, do_hrr=0, cnx_id_callback=0x0, cnx_id_callback_ctx=0x0, reset_seed=0x0, mtu_max=0) at /home/mcmillan/projects/picoquic/picoquicfirst/picoquicdemo.c:488
#7  0x000055555556395b in main (argc=1, argv=0x7fffffffe418) at /home/mcmillan/projects/picoquic/picoquicfirst/picoquicdemo.c:1305







