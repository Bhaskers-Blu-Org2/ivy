#lang ivy1.7

include order
include quic_packet
include quic_connection
include quic_deser
include quic_ser
include quic_infer
include tls
include udp_impl
include serdes

# This is a simple tester for quic servers. We assume the server is located on localhost at port 4433.
# The tester plays the role of a single client.
#
# Compile the tester like this:
#
#     ivyc target=test quic_server_test.ivy
#
# Run it like this:
#
#     ./quic_server_test
#


# The wire specification monitors this action.

action packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) = {}

# This is a ghost action representing a TLS send event.

action tls_send_event(src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid,data:stream_data,e:encryption_level) = {}

# create an UDP network instance to communicate to server with
# Note: because of packet coalescing, a single UDP datagram contains
# an array of UIC packets.

instance net : udp_impl(role,quic_packet.arr,quic_ser,quic_deser)

# fix a single connection id

var the_cid : cid

after init {
    the_cid := 13;
}

instance tls_extensions : vector(tls.extension)

# HACK: we fix the initial client transport parameters here

action make_transport_parameters returns (tp:quic_transport_parameters) = {
    tp.initial_version := 0xff00000e;
    var imsd : initial_max_stream_data;
    imsd.stream_pos_32 := 0x2000;
    var imd : initial_max_data;
    imd.stream_pos_32 := 0x4000;
    var it : idle_timeout;
    it.seconds_16 := 60;
    tp.transport_parameters := tp.transport_parameters.append(imsd);
    tp.transport_parameters := tp.transport_parameters.append(imd);
    tp.transport_parameters := tp.transport_parameters.append(it);
}

object botan = {
    instance id : unbounded_sequence
    instance lower : tls_lower_intf(id,stream_data)
    instance upper : tls_intf(id,stream_pos,stream_data,lower,tls_extensions,tls_ser)
}    

action role_to_endpoint(the_role : role) returns (ep:ip.endpoint) = {
    ep.protocol := ip.udp;
    ep.addr := 0x7f000001;   # the loop-back addr
    ep.port := 4987 if the_role = role.client else 4443;
}    

module quic_endpoint(addr,the_role) = {
    var ep : ip.endpoint
    var tls_id : botan.id
    var enc_level : encryption_level
    after init {
	ep := role_to_endpoint(the_role);
        enc_level := encryption_level.initial;
    }
}
    
# create a client and server. the client has an instance of TLS

instance client : quic_endpoint(0,role.client)
instance server : quic_endpoint(0,role.server)

# a socket to talk to server on

var sock : net.socket

after init {
    sock := net.open(role.client,client.ep);
    client.tls_id := 0;
    server.tls_id := 1;
    var extns := tls_extensions.empty;
    extns := extns.append(make_transport_parameters);
    call botan.upper.create(0,false,extns);  # false means this instance of tls is not a server
}

# Hook up tls to quic

implement botan.lower.send(tls_id:botan.id,bytes:stream_data) {
    # From draft 13 onward, we don't transmit the record headers.
    # We peel of the first 5 bytes of record header.
    # TODO: we also have to decrypt the records here if they are encrypted.
    if bytes.value(0) ~= 20 {
        var msgs := bytes.segment(5,bytes.end);
        if tls_id = client.tls_id {
            call tls_send_event(client.ep, server.ep, the_cid, 0, msgs, client.enc_level);
            client.enc_level := client.enc_level.next;
        };
        if tls_id = server.tls_id {
            call tls_send_event(server.ep, client.ep, the_cid, 0, msgs, server.enc_level);
            server.enc_level := server.enc_level.next;
        }
    }
}

after tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data : stream_data) {
    call show_tls_send_event(src,dst,scid,dcid,data);
}

# Assume that initial packets are sent only to the server under test

before packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
#    if pkt.hdr_type = 0x7f {
#        require dst = server.ep
#    };
    # TEMPORARY: all packets to server!
    if _generating {
        require dst = server.ep;
        require pkt.hdr_long -> pkt.dcid = 5 & pkt.scid = 5;
    };
    require pkt.hdr_long -> pkt.hdr_version = 0xff00000e
}

# Hook up to the remote server

# When the client sends a packet, route it to the server
# TODO: coalesce packets. As nof now, we send only one QUIC packet
# per UDP datagram.

after packet_event(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet) {
    var pkts := quic_packet.arr.empty;
    pkts := pkts.append(pkt);
    if src = client.ep {
	call net.send(role.client,sock,dst,pkts);
    }
}

# When an packet arrives at the client endpoint, generate a `packet_event`

implement net.recv(host:role, s:net.socket, src:ip.endpoint, pkts:quic_packet.arr) {
    if host = role.client {
	var dst := client.ep; # the destination must be client, since we have only one socket
        var idx := pkts.begin;
        while idx < pkts.end {
            var pkt := pkts.value(idx);
	    call show_packet(src,dst,pkt);
	    call infer_tls_events(src,dst,pkt);   # infer any TLS events on server side
	    call packet_event(src,dst,pkt);
            idx := idx.next;
        }
    }
}

# TLS reveice event handling
#
# When TLS data is received, at the client, we route it to the client's instance of TLS.
#
# Also, we require that all of the received data (from stream_pos up
# to stream_length) is transferred to TLS, otherwise, the data will be
# dribbled one byte at a time, which gets boring.
#
# Note: we need to send records to TLS, but as of dratf 13, what we
# have are sequences of messages. We prepend a record header to the messages.
# 

around tls_recv_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, e:encryption_level, lo : stream_pos, hi : stream_pos ) {
    require src = server.ep & dst = client.ep;
    require hi = crypto_length(src,scid,e);
    require e = encryption_level.handshake -> crypto_pos(dst,dcid,encryption_level.initial) = crypto_length(src,scid,encryption_level.initial);
    require e = encryption_level.other -> crypto_pos(dst,dcid,encryption_level.initial) = crypto_length(src,scid,encryption_level.initial);
    require e = encryption_level.other -> crypto_pos(dst,dcid,encryption_level.handshake) = crypto_length(src,scid,encryption_level.handshake);
    require dcid = the_cid;
    ...
    var tls_id := client.tls_id if dst = client.ep else server.tls_id;
    var data := stream_data.empty;
    # Create a record header
    data := data.append(22);   # Code for a handshake record
    data := data.append(0x3);  # Version hi byte
    data := data.append(0x3);  # Version lo byte
    data := data.append(hi_byte_pos(hi - lo)); # Length hi byte
    data := data.append(lo_byte_pos(hi - lo)); # Length lo byte
    # Now fill in the message bytes
    var idx := lo;
    while idx < hi {
	data := data.append(crypto_data(src,scid,e).value(idx));
	idx := idx.next
    };
    call botan.lower.recv(tls_id,data)
}
    
action hi_byte_pos(x:stream_pos) returns (res:byte) = {
    <<< res = (x >> 8) & 0xff; >>>
}

action lo_byte_pos(x:stream_pos) returns (res:byte) = {
    <<< res = x  & 0xff; >>>
}

# The protocol specification describes all the events occurring the system
# at all protocol layers. When we test, however, we need to divide the system
# into the part simulated by the tester and the part executed by the real code
# under test. In this case to onyl want the tester to play the role of a client
# at a particular network address.
#
# To accomplish this we add a precondition to the protocol events that
# restricts the parameter values in case we are running on behalf of
# the tester. We can determine this using the built-in predicate
# "_generating".

# This is the tester constraint for the stream frame protocol. We add some requirements
# to make the tests more interesting. In particular, we don't want the tester to
# produce lots of tiny frames (or empty ones) so we require that a stream frame
# send all of the available stream data. We never allow the fin bt to be set, since
# we don't really have good rules for this yet.

before frame.stream.handle(f:frame.stream,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid,e:encryption_level) {
    if _generating {
        require src = client.ep & dst = server.ep; 
        require scid = the_cid;
        require cid_dst_to_src_set(src,the_cid) & dcid = cid_dst_to_src(src,the_cid);
        require f.len & f.off; # TODO: when can f.off be false? We make len true here, since len=false implies last fram of packet.
        require ~f.fin; # TEMPORARY
        require f.length > 0;
        # require f.offset = stream_length(dst,dcid,f.id);
        # require f.length = (stream_app_data_end(dst,dcid,f.id)) - f.offset;
        # require ~f.fin;  # TODO: should allow fin after handshake is complete, or never?
    }
}

# We have something similar for crypto frames

before frame.crypto.handle(f:frame.crypto,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid,e:encryption_level) {
    if _generating {
        require src = client.ep & dst = server.ep; 
        require scid = the_cid;
        require f.length > 0;
#        call show_level_offset_length(e,crypto_length(src,scid,e),crypto_data_end(src,scid,e))
        require f.offset = crypto_length(src,scid,e);
        require f.length = (crypto_data_end(src,scid,e)) - f.offset;
    }
}

# Generate ack frames only for the client.

before frame.ack.handle(f:frame.ack,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require src = client.ep & dst = server.ep; 
        require scid = the_cid;
        force_new_ack := true;
    }
}

# Generate rst_stream frames only for the client.

before frame.rst_stream.handle(f:frame.rst_stream,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require src = client.ep & dst = server.ep; 
        require scid = the_cid;
        require f.id = 4;
    }
}

# Generate max_stream_id frames only for the client.

before frame.max_stream_id.handle(f:frame.max_stream_id,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require src = client.ep & dst = server.ep; 
        require scid = the_cid;
    }
}

# Generate connection_close frames only for the client.

before frame.connection_close.handle(f:frame.connection_close,src:ip.endpoint,dst:ip.endpoint,scid:cid,dcid:cid) {
    if _generating {
        require src = client.ep & dst = server.ep; 
        require scid = the_cid;
    }
}

# We allow generating application data at the client end only if the previous data have
# not been sent. This is to avoid building up a long queue. TEMPORARY: we only generate data
# for stream id 0x4.

before app_send_event(src:ip.endpoint, dst:ip.endpoint, dcid:cid, s : stream_id, data : stream_data) {
    if _generating {
        require s = 0x4;
        require src = client.ep;
        require dst = server.ep;
        require cid_dst_to_src_set(src,the_cid) & dcid = cid_dst_to_src(src,the_cid);
        require stream_length(dst,dcid,s) = stream_app_data_end(dst,dcid,s);
    }
}

# Note, we don't need a tester precondition for packet protocol
# events, since the frame queue for the server end will always be
# empty. This is because server frames are only inferred in response to
# a server packet event, which immediately dequeues them.

export frame.ack.handle
export frame.stream.handle
export frame.crypto.handle
export packet_event
export app_send_event
export tls_recv_event
export frame.rst_stream.handle
export frame.max_stream_id.handle
export frame.connection_close.handle

attribute radix=16       # print in hex

interpret cid -> intbv[1][13][2]
interpret version -> bv[32]
interpret pkt_num -> bv[32]
interpret error_code -> bv[16]
interpret stream_id -> bv[3]
attribute frame.idx.cardinality = 1
attribute frame.ack.block.idx.cardinality = 1
attribute pkt_num.cardinality = 1
attribute stream_pos.cardinality = 4
#attribute ip.addr.override = bv[1]
#attribute ip.port.override = bv[1]

action show_tls_send_event(src:ip.endpoint, dst:ip.endpoint, scid:cid, dcid:cid, data : stream_data) = {}

import show_tls_send_event

# Print a packet on stdout. In the compiled tester importing `show_packet`
# causes calls to be logged to stdout.

action show_packet(src:ip.endpoint,dst:ip.endpoint,pkt:quic_packet)
import show_packet

import action show_level_offset_length(e:encryption_level,offset:stream_pos,length:stream_pos)
