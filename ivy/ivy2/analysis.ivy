#lang ivy1.7

include ivylang
include hash

object ivy = { ...

    instance ident_to_exprs : hash_rel(ident,expr)

    # This analysis runs over a flat program and finds the subtype
    # relations

    object subtypes = {
        type this = struct {
            subtypes_of : ident_to_exprs,
            supertype_of : symeval
        }
	action is_subtype(s:this,sub:expr,super:expr) returns (res:bool) = {
	    if sub isa symbol {
		var name := sub.get_name;
		if s.supertype_of.mem(name) {
		    res := s.supertype_of.value(name).get_name = super.get_name
		}
	    }
	}
    }

    object prog = { ...
        action get_subtypes(p:this) returns (s:subtypes) = {
            var idx := p.decls.begin;
            while idx < p.decls.end {
                s := p.decls.value(idx).build_subtypes(s);
                idx := idx.next
            }
        }
    }

    object decl = { ...
        action build_subtypes(s:decl,st:subtypes) returns (st:subtypes)
    }

    object typedc = { ...
        action build_subtypes(s:this,st:subtypes) returns (st:subtypes) = {
            if s.has_super {
                st.subtypes_of := st.subtypes_of.add(s.super.get_name,s.sort);
                st.supertype_of := st.supertype_of.set(s.sort.get_name,s.super);
            }
        }
    }        
            
    # This analysis runs over a flat program and maps all the global
    # identifiers to their types. For this purpose, actions are
    # treated as if they were functions. 

    object global_types = {
        type this = struct {
            type_of : symeval
        }
    }
    
    object prog = { ...
        action get_global_types(p:this) returns (s:global_types) = {
            var idx := p.decls.begin;
	    while idx < p.decls.end {
                s := p.decls.value(idx).build_global_types(s);
                idx := idx.next
            }
        }
    }

    object decl = { ...
        action build_global_types(s:decl,st:global_types) returns (st:global_types)
    }

    object vardc = { ...
        action build_global_types(s:this,st:global_types) returns (st:global_types) = {
	    var ty := s.typing.get_arg(1);
	    if s.is_destructor {
		ty := ty.curry;
	    };
	    st.type_of := st.type_of.set(s.typing.get_arg(0).get_name,ty);
        }
    }        

    action get_formal_type(typings : vector[expr],ann:annot) returns (res:expr) = {
	if typings.end = 0 {
	    res := empty.make(ann);
	} else {
	    var tys : vector[expr];
	    var idx := typings.begin;
            while idx < typings.end {
		var ty := typings.value(idx).get_arg(1);
		tys := tys.append(ty);
		idx := idx.next
            };
	    res := times.fold_left(tys,ann);
	}
    }

    object actdc = { ...
        action build_global_types(s:this,st:global_types) returns (st:global_types) = {
	    var inpty := get_formal_type(s.inputs,s.ann);
	    var outty := get_formal_type(s.outputs,s.ann);
	    var ty := arrow.make(inpty,outty,s.ann);
	    if s.is_member {
		ty := ty.curry;
	    };
	    st.type_of := st.type_of.set(s.name.get_name,ty);
	}
    }
}
