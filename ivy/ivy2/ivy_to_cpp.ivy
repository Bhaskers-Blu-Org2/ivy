#lang ivy1.7

include ivylang
include cpplang

module generic_to_cpp(ivytype,cpptype,cppclass) = {
    action to_cpp(s:ivytype) returns (res:cppclass) = {
        var t : cpptype;
        t := s.to_cpp_int;
        t.ann := s.ann;
        res := t
    }
}

module binary_op_to_cpp(ivytype,cpptype,cppclass) = {
    instantiate generic_to_cpp(ivytype,cpptype,cppclass)
    action to_cpp_int(s:ivytype) returns (res:cpptype) = {
        res.lhs := s.lhs.to_cpp;
        res.rhs := s.rhs.to_cpp;
    }
}
    
module test_to_cpp(ivyclass,cppclass) = {
    export action test(s:str) returns(res:str) = {
        var ivyexpr := ivyclass.dec(s);
        var cppexpr := ivyexpr.to_cpp;
        res := cppexpr.enc
    }
    export action test1(s:str) returns(res:cppclass) = {
        var ivyexpr := ivyclass.dec(s);
        res := ivyexpr.to_cpp;
    }
}

object ivy = { ...

    object expr = { ...
        action to_cpp(s:expr) returns (res:cpp.expr)
    }
    
    object symbol = { ...
        instantiate generic_to_cpp(ivy.symbol,cpp.symbol,cpp.expr)
        action to_cpp_int(s:symbol) returns (res:cpp.symbol) = {
            res.name := s.name;
            res.vrb := cpp.str_to_verb(res.name);
        }
    }

    object app = { ...
        instantiate generic_to_cpp(ivy.app,cpp.app,cpp.expr)
        action to_cpp_int(s:app) returns (res:cpp.app) = {
            res.func := s.func.to_cpp;
            var idx := s.args.begin;
            while idx < s.args.end {
                res.args := res.args.append(s.args.value(idx).to_cpp);
                idx := idx.next
            }
        }
    }

    object stmt = { ...
        action to_cpp(s:stmt) returns (res:cpp.stmt)
    }

    object skipst = { ...
        instantiate generic_to_cpp(ivy.skipst,cpp.skipst,cpp.stmt)
        action to_cpp_int(s:ivy.skipst) returns (res:cpp.skipst) = {
        }
    }

    object asgn = { ...
        instantiate binary_op_to_cpp(ivy.asgn,cpp.asgn,cpp.stmt)
    }

    object sequence = { ...
        instantiate binary_op_to_cpp(ivy.sequence,cpp.sequence,cpp.stmt)
    }

    object ifst = { ...
        instantiate generic_to_cpp(ivy.ifst,cpp.ifst,cpp.stmt)
        action to_cpp_int(s:ivy.ifst) returns (res:cpp.ifst) = {
            res.cond := s.cond.to_cpp;
            res.thenst := s.thenst.to_cpp;
            res.elsest := s.elsest.to_cpp;
        }
    }

    object varst = { ...
        instantiate generic_to_cpp(ivy.varst,cpp.varst,cpp.stmt)
        action to_cpp_int(s:varst) returns (res:cpp.varst) = {
            res.vtype._type := cpp.inttype(s.ann);
            res.vtype.name := s.name.to_cpp;
        }
    }

    object decl = { ...
        action to_cpp(s:decl) returns (res:cpp.decl)
    }

    object actdc = { ...
        instantiate generic_to_cpp(this,cpp.funcimpl,cpp.decl)
        action to_cpp_int(s:actdc) returns (res:cpp.funcimpl) = {
            var has_output := s.outputs.end > 0;
            res.ftype.base._type :=
                cpp.inttype(s.ann) if has_output else cpp.voidtype(s.ann);
            res.ftype.base.name := s.name.to_cpp;
            var idx := s.inputs.begin;
            while idx < s.inputs.end {
                var argt : cpp.simpletype;
                argt._type := cpp.inttype(s.ann);
                argt.name := s.inputs.value(idx).to_cpp;
                res.ftype.args := res.ftype.args.append(argt);
                idx := idx.next
            };
            var body := s.body.to_cpp;
            if has_output {
                var rvar := s.outputs.value(0).to_cpp;
                body := cpp.sequence.make(body,cpp.retst.make(rvar,s.ann),s.ann);
                body := cpp.sequence.make(cpp.varst.make(res.ftype.base._type,rvar,s.ann),body,s.ann);
            };
            res.body := body
        }
    }

    object expr = { ...
        instantiate test_to_cpp(ivy.expr,cpp.expr)
    }
    
    object stmt = { ...
        instantiate test_to_cpp(ivy.stmt,cpp.stmt)
    }


    object decl = { ...
        instantiate test_to_cpp(ivy.decl,cpp.decl)
    }
}

