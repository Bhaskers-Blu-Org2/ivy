#lang ivy1.7

include relarray
include order
include udp

instance node : iterable

isolate nset = {

    type this
    alias t = this
    type index

    relation member(N:node, S:t)
    relation majority(S:t)

    action emptyset returns (s:nset) 
    action add(s:nset, n : node) returns (s:nset) 

    specification {
        invariant [majorities_intersect]
            (majority(S) & majority(T)) -> exists N. member(N,S) & member(N,T)

        after emptyset {
            ensure ~member(N, s)
        }

        after add {
            ensure member(N,s) <-> (member(N , old s) | N = n)
        }
    }

    implementation {
	interpret index -> int
	function card(S:nset) : index
	instance arr : array(index,node)
	destructor repr(N:nset) : arr
	individual all : nset
	
	definition member(N,S) = exists I. 0 <= I & I < repr(S).end & repr(S).value(I, N)
	definition majority(S) = card(S) + card(S) > card(all)

	after init {
	    card(S) := 0;
            all.repr := arr.empty;
	    var i := node.iter.create(0);
	    while ~i.is_end
	        invariant (forall N.~(member(N,S) & member(N,T))) ->
	                      card(S) + card(T) <= card(all)
                invariant node.iter.done(N,i) <-> member(N,all)
                invariant card(S) >= 0
	    {
                all.repr := all.repr.append(i.val);
		card(S) := card(S) + 1 if member(i.val, S) else card(S);
                i := i.next
	    };
            assume member(N,all)
	}

        implement emptyset {
            s.repr := arr.empty()
        }

        implement add {
            if ~member(n, s) {
                s.repr := s.repr.append(n)
            }
        }
    }
}
with node

isolate toy_protocol = {

    relation voted(N:node,M:node)
    relation isleader(N:node)
    var quorum : nset

    specification {
        after init {
            voted(N,M) := false;
            isleader(N) := false;
        }

        invariant [one_leader]
            isleader(N) & isleader(M) -> N = M

        invariant [one_vote_per_node] 
            voted(L, N ) & voted(L, M ) -> N = M

        invariant [leader_has_majority] 
            isleader(N) ->
                nset.majority(quorum) &
                forall M. nset.member(M , quorum) -> voted(M,N)

        action vote(v : node, n : node) = {
            require ~voted(v,N);
            voted(v, n) := true
        }

        action become_leader(n : node, s : nset) = {
            require nset.majority(s) & (nset.member(N,s) -> voted(N, n));
            isleader(n) := true;
            quorum := s
        }
    }
}
with nset

instance net : udp_simple(node,msg.t)

object msg_kind = {
    type this = {request_vote, vote, leader}
}

object msg = {
    type this = struct {
        kind : msg_kind,
        src : node,
        vote : node
    }
}

isolate shim = {


    module handler(p_kind) = {
        action handle(dst:node,m:msg.t)
        specification {
            before handle {
                require sent(m,dst) & m.m_kind = p_kind
            }
        }
    }    

    relation sent(M:msg,N:node)

    instance request_vote : handler(msg_kind.request_vote)
    instance vote : handler(msg_kind.vote)
    instance leader : handler(msg_kind.leader)

    action bcast(src:node,m:msg)

    specification {
        after init {
            sent(M,D) := false;
        }

        before bcast {
            sent(m,D) := true;
        }
    }

    implementation {

        action debug_sending(src:node,dst:node,m:msg.t)
        action debug_recving(dst:node,m:msg.t)

        implement net.recv(dst:node,m:msg.t) {
            call debug_recving(dst,m);
            if m.m_kind = msg_kind.request_vote {
                call request_vote.handle(dst,m)
            }
            else if m.m_kind = msg_kind.vote {
                call vote.handle(dst,m)
            }
            else if m.m_kind = msg_kind.leader {
                call leader.handle(dst,m)
            }
        }

        implement bcast {
            var iter := node.iter.create(0);
            while ~iter.is_end
            invariant net.spec.sent(M,D) -> sent(M,D)
            {
                var n := iter.val;
                call debug_sending(src,n,m);
                call net.send(src,n,m);
                iter := iter.next;
            }
        }

        invariant net.spec.sent(M,D) -> sent(M,D)
    }

} with net, node


isolate toy_system = {

    invariant [safe] forall M1:msg, M2:msg. 
                       shim.sent(M1) & M1.kind = msg_kind.leader
                       & shim.sent(M2) & M2.kind = msg_kind.leader
                         -> M1.src = M2.src

    relation alreadyvoted(N:node)
    function voters(N:node) : nset

    after init procedure init(self : node) {
        alreadyvoted(self) := false;
        voters(self) := nset.emptyset()
    }

    action request_vote(self : node) {
        var msg : msg;
        msg.kind := msg_kind.request_vote;
        msg.src = self;
        shim.bcast(msg);
        if ~alreadyvoted(self) {
            alreadyvoted(self) := true
            voters(self) := voters.add(self);
            toy_protocol.vote(self,self) # ghost
        }
    }


    implement shim.request_vote.handle(self : node, req : msg) {
        if ~alreadyvoted(self) {
            alreadyvoted(self) := true;
            var reply : msg;
            reply.kind := msg_kind.vote;
            reply.src := self;
            reply.vote := req.src;
            shim.bcast(self,reply);
            toy_protocol.vote(self,req.src)
        }
    }

    action receive vote(self : node, req : msg) {
        voters(self) := voters.self.add(req.src);
        if nset.majority(voters(self)) {
            reply : msg;
            reply.kind := msg.leader;
            reply.src := self;
            shim.bcast(self,reply);
            toy protocol.become_leader(self, voters(self)) # ghost
        }
    }

    private {

        invariant forall M:msg. shim.sent(M) & M.kind = msg_kind.vote -> toy_protocol.voted(M.src, M.vote)
#        invariant shim.sent(M) & M.kind = msg_kind.request -> toy_protocol.voted(M.src,M.src)
        invariant nset.member(N1 ,voters(N2)) -> toy_protocol.voted(N1,N2)
        invariant forall M:msg. shim.sent(M) & M.kind = msg_kind.leader -> toy protocol.isleader(M.src)
        invariant toy_protocol.voted(N1,N2) -> alreadyvoted(N1)

    }
        



} with nset, toy_protocol, shim

export toy_protocol.vote
export toy_protocol.become_leader
