---
layout: page
title: Model Checking
---

Constructing an inductive invariant manually is an effective proof
technique, but it can be both challenging and time consuming. In some
cases, we can apply the technique of [Model
Checking](https://en.wikipedia.org/wiki/Model_checking) to
automatically construct a proof, or to reduce the burden of manually
constructing invariants. When using model checking, we simply state
the property of the program that we want to hold, and the model
checker determines whether the program satisfies the property or not.
If not, it provides a behavioral trace that shows why the property
does not hold.

The catch is that model checkers only work reliably for finite-state
systems. In practice, that means that each IVy type must be
interpreted as some finite set, for example, as a finite sub-range of
the integers, or as a fixed-width bit vector. 

Take our simple client-server example from the section
[Invariants](client_server_example.html).

    type client
    type server

    relation link(X:client, Y:server)
    relation semaphore(X:server)

    after init {
        semaphore(W) := true;
        link(X,Y) := false
    }       

    action connect(x:client,y:server) = {
      require semaphore(y);
      link(x,y) := true;
      semaphore(y) := false
    }

    action disconnect(x:client,y:server) = {
      require link(x,y);
      link(x,y) := false;
      semaphore(y) := true
    }

    invariant link(X,Y) & link(Z,Y) -> X = Z

To prove the invariant property, we needed an auxiliary invariant.
With model checking, we don't need to proving an auxiliary invariant,
but we have to make the types finite. Let's add the following declarations to
the example:

    interpret client -> {0..2}
    interpret server -> {0..1}
    
    attribute method = mc

The first two declarations tell IVy to interpret `client` and `server` as finite
sub-ranges of the integers. We have exactly three clients and two servers. The last
declaration tells IVy to prove the invariant using model checking. Here's what IVY has to say:

    ivy_check client_server_example_mv.ivy 

    Isolate this:

    ********************************************************************************

    client_server_example_mv.ivy: line 26: Model checking invariant

    Instantiating quantifiers (see ivy_mc.log for instantiations)...
    Expanding schemata...
    Instantiating axioms...

    Model checker output:
    --------------------------------------------------------------------------------
    ABC command line: "read_aiger /tmp/tmpwC0AcP.aig; pdr; write_aiger_cex  /tmp/tmpwC0AcP.out".

    Invariant F[1] : 4 clauses with 5 flops (out of 11) (cex = 0, ave = 4.00)
    Verification of invariant with 4 clauses was successful.  Time =     0.00 sec
    Property proved.  Time =     0.02 sec
    There is no current CEX.
    --------------------------------------------------------------------------------

    PASS

    OK

IVy converted the program verification problem into a circuit
verification problem and gave it to a hardware model checker called
[ABC](https://people.eecs.berkeley.edu/~alanmi/abc/abc.htm). ABC
searched the full state space of the program and determined that our
claimed invariant always holds.


Suppose we made a mistake, and forgot the requirement the that
sempahore has to be up when connecting a client (the `require`
statement in action `connect`). Here's what we would get:




