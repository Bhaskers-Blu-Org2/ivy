begin sat:
(assert (and and))
end sat:

begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x7ccd)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x7ccd)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) true))
         (or false a!1 (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed false))
(assert (= clrq2.spec.recv_idx 0))
(assert (= clrq2.spec.send_idx 1))
(assert (= head.rep.value #x0000))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x41f2)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xa9e3)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  0)
(define-fun clrq2.spec.send_idx () Int
  1)
(define-fun head.rep.value () (_ BitVec 16)
  #x0000)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun |alit:3| () Bool
  true)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x0000)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun k!1 () Int
  3)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x0000)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun k!12 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val!15 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x7ccd
    #x41f2))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!15 (k!12 x!0)))
(define-fun clrq2.spec.sent!14 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 0) (= x!1 msg!val!0)) true
    false))
(define-fun k!13 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    3))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!14 (k!13 x!0) (k!12 x!1)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x27f8)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x27f8)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xcde7)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xcde7)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x255a)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x255a)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xc233)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xc233)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!2 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (or false a!1 a!2 (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed false))
(assert (= clrq2.spec.recv_idx 1))
(assert (= clrq2.spec.send_idx 2))
(assert (= head.rep.value #x7ccd))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x079a)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x5d32)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  1)
(define-fun clrq2.spec.send_idx () Int
  2)
(define-fun head.rep.value () (_ BitVec 16)
  #x7ccd)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x7ccd)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x7ccd)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun k!19 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x7ccd)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun val!36 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xcde7
    #x079a))
(define-fun k!33 ((x!0 Int)) Int
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    4)))
(define-fun k!32 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!36 (k!32 x!0)))
(define-fun tx!35 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 2
    0))
(define-fun clrq2.spec.sent!34 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 1) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!34 (k!33 x!0) (k!32 x!1)))
(define-fun tx ((x!0 msg)) Int
  (tx!35 (k!32 x!0)))begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xd95a)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xd95a)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun htspec.queue.head () Int)
(declare-fun htspec.queue.tail () Int)
(declare-fun htspec.queue.empty () Bool)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun ref.serialized (Int) Bool)
(declare-fun headtail.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun headtail.spec.recv_idx () Int)
(declare-fun ref.next () Int)
(declare-fun headtail.spec.send_idx () Int)
(declare-fun tx (msg) Int)
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:tx| (tx |__fml:p|))
     (< headtail.spec.recv_idx headtail.spec.send_idx)
     (< |__new_fml:tx| ref.next)
     (<= 0 |__new_fml:tx|)
     (headtail.spec.sent headtail.spec.recv_idx |__fml:p|)
     (ref.serialized |__new_fml:tx|)
     (not htspec.queue.empty)
     (not (ref.committed |__new_fml:tx|))
     (= htspec.queue.empty (>= htspec.queue.tail htspec.queue.head))))
(assert (forall ((X__0 Int)) (and true (or false (= (ref.committed X__0) false)))))
(assert (= headtail.spec.send_idx 2))
(assert (= headtail.spec.recv_idx 0))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!2 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2))))
    (and true
         (=> a!1 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!2 (= (headtail.spec.sent X__0 X__1) true))
         (or false a!1 a!2 (= (headtail.spec.sent X__0 X__1) false))))))
(assert (= htspec.queue.head 2))
(assert (= htspec.queue.tail 0))
(assert (= ref.next 6))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.serialized X__0) true))
       (=> (= X__0 2) (= (ref.serialized X__0) true))
       (or false (= X__0 0) (= X__0 2) (= (ref.serialized X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xb105)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun htspec.queue.empty () Bool
  false)
(define-fun k!2 () Int
  0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun htspec.queue.tail () Int
  0)
(define-fun headtail.spec.recv_idx () Int
  0)
(define-fun headtail.spec.send_idx () Int
  2)
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun ref.next () Int
  6)
(define-fun htspec.queue.head () Int
  2)
(define-fun k!11 () Int
  8)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.serialized!22 ((x!0 Int)) Bool
  (ite (= x!0 8) false
    true))
(define-fun k!21 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
    8)))
(define-fun ref.serialized ((x!0 Int)) Bool
  (ref.serialized!22 (k!21 x!0)))
(define-fun ref.committed ((x!0 Int)) Bool
  false)
(define-fun headtail.spec.sent!23 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 0) (= x!1 msg!val!0)) true
    false))
(define-fun k!20 ((x!0 Int)) Int
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    8)))
(define-fun k!19 ((x!0 msg)) msg
  msg!val!0)
(define-fun headtail.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (headtail.spec.sent!23 (k!20 x!0) (k!19 x!1)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x7ccd)
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun htspec.queue.head () Int)
(declare-fun htspec.queue.tail () Int)
(declare-fun htspec.queue.empty () Bool)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun ref.serialized (Int) Bool)
(declare-fun headtail.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun headtail.spec.recv_idx () Int)
(declare-fun ref.next () Int)
(declare-fun headtail.spec.send_idx () Int)
(declare-fun tx (msg) Int)
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:tx| (tx |__fml:p|))
     (< headtail.spec.recv_idx headtail.spec.send_idx)
     (< |__new_fml:tx| ref.next)
     (<= 0 |__new_fml:tx|)
     (headtail.spec.sent headtail.spec.recv_idx |__fml:p|)
     (ref.serialized |__new_fml:tx|)
     (not htspec.queue.empty)
     (not (ref.committed |__new_fml:tx|))
     (= htspec.queue.empty (>= htspec.queue.tail htspec.queue.head))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (or false (= X__0 0) (= (ref.committed X__0) false)))))
(assert (= headtail.spec.send_idx 2))
(assert (= headtail.spec.recv_idx 1))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!2 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2))))
    (and true
         (=> a!1 (= (headtail.spec.sent X__0 X__1) false))
         (=> a!2 (= (headtail.spec.sent X__0 X__1) true))
         (or false a!1 a!2 (= (headtail.spec.sent X__0 X__1) false))))))
(assert (= htspec.queue.head 2))
(assert (= htspec.queue.tail 1))
(assert (= ref.next 6))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.serialized X__0) true))
       (=> (= X__0 2) (= (ref.serialized X__0) true))
       (or false (= X__0 0) (= X__0 2) (= (ref.serialized X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xa8d4)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun htspec.queue.empty () Bool
  false)
(define-fun k!30 () Int
  8)
(define-fun |__new_fml:tx| () Int
  2)
(define-fun htspec.queue.tail () Int
  1)
(define-fun headtail.spec.recv_idx () Int
  1)
(define-fun headtail.spec.send_idx () Int
  2)
(define-fun k!39 () Int
  9)
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun ref.next () Int
  6)
(define-fun htspec.queue.head () Int
  2)
(define-fun |alit:0| () Bool
  false)
(define-fun k!52 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
    8)))
(define-fun ref.serialized!54 ((x!0 Int)) Bool
  (ite (= x!0 8) false
    true))
(define-fun ref.serialized ((x!0 Int)) Bool
  (ref.serialized!54 (k!52 x!0)))
(define-fun k!49 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    2))
(define-fun ref.committed!53 ((x!0 Int)) Bool
  (ite (= x!0 0) true
    false))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!53 (k!49 x!0)))
(define-fun k!50 ((x!0 msg)) msg
  msg!val!0)
(define-fun headtail.spec.sent!55 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 1) (= x!1 msg!val!0)) true
    false))
(define-fun k!51 ((x!0 Int)) Int
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    9)))
(define-fun headtail.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (headtail.spec.sent!55 (k!51 x!0) (k!50 x!1)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xcde7)
(define-fun tx ((x!0 msg)) Int
  2)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x9eb4)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x9eb4)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed false))
(assert (= clrq1.spec.recv_idx 0))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!2 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) true))
         (or false a!1 a!2 a!3 (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 3))
(assert (= head.rep.value #x4ab4))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xc40e)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xf874)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!16 () Int
  6)
(define-fun head.rep.value () (_ BitVec 16)
  #x4ab4)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun clrq1.spec.recv_idx () Int
  0)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x4ab4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x4ab4)
(define-fun clrq1.spec.send_idx () Int
  3)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x4ab4)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun k!15 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!18 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 0) (= x!1 msg!val!0)) true
    false))
(define-fun k!17 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    6))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!18 (k!17 x!0) (k!15 x!1)))
(define-fun val!20 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x27f8
    #xc40e))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!20 (k!15 x!0)))
(define-fun tx!19 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 1
    0))
(define-fun tx ((x!0 msg)) Int
  (tx!19 (k!15 x!0)))begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (or false (= X__0 0) (= X__0 2) true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (or false (= X__0 0) (= X__0 2) (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x1a70)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1 () Int
  1)
(define-fun |alit:0| () Bool
  false)
(define-fun k!6 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
    1)))
(define-fun ref.committed!7 ((x!0 Int)) Bool
  (ite (= x!0 1) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!7 (k!6 x!0)))
(define-fun ref.txres!8 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
    #x0000))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!5 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    2))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!8 (k!5 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!2 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!3 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (or false a!1 a!2 a!3 a!4 (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed false))
(assert (= clrq2.spec.recv_idx 2))
(assert (= clrq2.spec.send_idx 4))
(assert (= head.rep.value #x72ac))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xf8e1)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x2367)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  2)
(define-fun clrq2.spec.send_idx () Int
  4)
(define-fun head.rep.value () (_ BitVec 16)
  #x72ac)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun k!40 () Int
  7)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x72ac)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x72ac)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x72ac)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun k!54 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    7)))))
(define-fun val!57 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xd95a
    #xf8e1))
(define-fun k!53 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!57 (k!53 x!0)))
(define-fun clrq2.spec.sent!55 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 2) (= x!1 msg!val!0)) true
    false))
(define-fun tx!56 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 5
    0))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!55 (k!54 x!0) (k!53 x!1)))
(define-fun tx ((x!0 msg)) Int
  (tx!56 (k!53 x!0)))begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x4adc)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x4adc)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed false))
(assert (= clrq1.spec.recv_idx 1))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!2 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (or false a!1 a!2 a!3 (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 3))
(assert (= head.rep.value #x4c06))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xd78f)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x585c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x4c06)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun clrq1.spec.recv_idx () Int
  1)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x4c06)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x4c06)
(define-fun clrq1.spec.send_idx () Int
  3)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun k!39 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x4c06)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun tx!42 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 3
    0))
(define-fun k!38 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!41 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 1) (= x!1 msg!val!0)) true
    false))
(define-fun k!40 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    6))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!41 (k!40 x!0) (k!38 x!1)))
(define-fun val!43 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x255a
    #xd78f))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!43 (k!38 x!0)))
(define-fun tx ((x!0 msg)) Int
  (tx!42 (k!38 x!0)))begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (or false (= X__0 0) (= X__0 2) true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (or false (= X__0 0) (= X__0 2) (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x9a32)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!12 () Int
  1)
(define-fun |alit:0| () Bool
  false)
(define-fun k!17 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
    1)))
(define-fun ref.committed!18 ((x!0 Int)) Bool
  (ite (= x!0 1) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!18 (k!17 x!0)))
(define-fun ref.txres!19 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
    #x0000))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!16 ((x!0 Int)) Int
  (ite (= x!0 0) 0
    2))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!19 (k!16 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!2 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!3 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!4 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (or false a!1 a!2 a!3 a!4 a!5 (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed false))
(assert (= clrq2.spec.recv_idx 3))
(assert (= clrq2.spec.send_idx 5))
(assert (= head.rep.value #x7160))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x1b18)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xa45c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  3)
(define-fun clrq2.spec.send_idx () Int
  5)
(define-fun head.rep.value () (_ BitVec 16)
  #x7160)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x7160)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x7160)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x7160)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!61 () Int
  4)
(define-fun k!76 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun val!80 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x9eb4
    #x1b18))
(define-fun tx!79 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 6
    0))
(define-fun k!75 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!80 (k!75 x!0)))
(define-fun clrq2.spec.sent!78 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 3) (= x!1 msg!val!0)) true
    false))
(define-fun k!77 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    7))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!78 (k!77 x!0) (k!75 x!1)))
(define-fun tx ((x!0 msg)) Int
  (tx!79 (k!75 x!0)))begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed false))
(assert (= clrq1.spec.recv_idx 2))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!2 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (or false a!1 a!2 a!3 (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 3))
(assert (= head.rep.value #x1014))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x26fa)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xc33a)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x1014)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun clrq1.spec.recv_idx () Int
  2)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x1014)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x1014)
(define-fun clrq1.spec.send_idx () Int
  3)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun k!47 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x1014)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun clrq1.spec.sent!62 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 2) (= x!1 msg!val!0)) true
    false))
(define-fun val!64 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xc233
    #x26fa))
(define-fun k!61 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    6))))
(define-fun k!60 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!62 (k!61 x!0) (k!60 x!1)))
(define-fun tx!63 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 4
    0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!64 (k!60 x!0)))
(define-fun tx ((x!0 msg)) Int
  (tx!63 (k!60 x!0)))begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!2 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!3 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!4 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (or false a!1 a!2 a!3 a!4 a!5 (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed false))
(assert (= clrq2.spec.recv_idx 4))
(assert (= clrq2.spec.send_idx 5))
(assert (= head.rep.value #xd247))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xc13c)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xc794)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  4)
(define-fun clrq2.spec.send_idx () Int
  5)
(define-fun head.rep.value () (_ BitVec 16)
  #xd247)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xd247)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xd247)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun k!84 () Int
  3)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xd247)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!99 () Int
  6)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun k!100 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    6))))))
(define-fun tx!102 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 7
    0))
(define-fun k!98 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val!103 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x4adc
    #xc13c))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!103 (k!98 x!0)))
(define-fun clrq2.spec.sent!101 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 4) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!101 (k!100 x!0) (k!98 x!1)))
(define-fun tx ((x!0 msg)) Int
  (tx!102 (k!98 x!0)))begin sat:
(declare-sort msg)
(declare-fun htspec.queue.head () Int)
(declare-fun htspec.queue.tail () Int)
(declare-fun htspec.queue.empty () Bool)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun ref.serialized (Int) Bool)
(declare-fun headtail.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun headtail.spec.recv_idx () Int)
(declare-fun ref.next () Int)
(declare-fun headtail.spec.send_idx () Int)
(declare-fun tx (msg) Int)
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:tx| (tx |__fml:p|))
     (< headtail.spec.recv_idx headtail.spec.send_idx)
     (< |__new_fml:tx| ref.next)
     (<= 0 |__new_fml:tx|)
     (headtail.spec.sent headtail.spec.recv_idx |__fml:p|)
     (ref.serialized |__new_fml:tx|)
     (not htspec.queue.empty)
     (not (ref.committed |__new_fml:tx|))
     (= htspec.queue.empty (>= htspec.queue.tail htspec.queue.head))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (or false (= X__0 0) (= X__0 2) (= (ref.committed X__0) false)))))
(assert (= headtail.spec.send_idx 8))
(assert (= headtail.spec.recv_idx 2))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 3) true (= (val X__1) #xd95a) (= (tx X__1) 5)))
        (a!2 (and (= X__0 2) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 6) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!4 (and (= X__0 4) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!5 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!6 (and (= X__0 5) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!7 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!8 (and (= X__0 7) true (= (val X__1) #x4adc) (= (tx X__1) 7))))
    (and true
         (=> a!1 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!2 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!3 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!4 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!5 (= (headtail.spec.sent X__0 X__1) false))
         (=> a!6 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!7 (= (headtail.spec.sent X__0 X__1) false))
         (=> a!8 (= (headtail.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             (= (headtail.spec.sent X__0 X__1) false))))))
(assert (= htspec.queue.head 8))
(assert (= htspec.queue.tail 2))
(assert (= ref.next 8))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.serialized X__0) true))
       (=> (= X__0 1) (= (ref.serialized X__0) true))
       (=> (= X__0 2) (= (ref.serialized X__0) true))
       (=> (= X__0 3) (= (ref.serialized X__0) true))
       (=> (= X__0 4) (= (ref.serialized X__0) true))
       (=> (= X__0 5) (= (ref.serialized X__0) true))
       (=> (= X__0 6) (= (ref.serialized X__0) true))
       (=> (= X__0 7) (= (ref.serialized X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= (ref.serialized X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x5def)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun htspec.queue.empty () Bool
  false)
(define-fun |__new_fml:tx| () Int
  1)
(define-fun htspec.queue.tail () Int
  2)
(define-fun headtail.spec.recv_idx () Int
  2)
(define-fun headtail.spec.send_idx () Int
  8)
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun ref.next () Int
  8)
(define-fun htspec.queue.head () Int
  8)
(define-fun k!62 () Int
  12)
(define-fun k!83 () Int
  13)
(define-fun |alit:0| () Bool
  false)
(define-fun k!85 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 1) 1
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    8)))))))))
(define-fun ref.serialized!87 ((x!0 Int)) Bool
  (ite (= x!0 8) false
    true))
(define-fun ref.serialized ((x!0 Int)) Bool
  (ref.serialized!87 (k!85 x!0)))
(define-fun ref.committed!86 ((x!0 Int)) Bool
  (ite (= x!0 1) false
    true))
(define-fun k!81 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
    1)))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!86 (k!81 x!0)))
(define-fun k!82 ((x!0 msg)) msg
  msg!val!0)
(define-fun headtail.spec.sent!88 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 2) (= x!1 msg!val!0)) true
    false))
(define-fun k!84 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 2) 2
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    13)))))))))
(define-fun headtail.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (headtail.spec.sent!88 (k!84 x!0) (k!82 x!1)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x27f8)
(define-fun tx ((x!0 msg)) Int
  1)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x0ae5)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x0ae5)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun htspec.queue.head () Int)
(declare-fun htspec.queue.tail () Int)
(declare-fun htspec.queue.empty () Bool)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun ref.serialized (Int) Bool)
(declare-fun headtail.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun headtail.spec.recv_idx () Int)
(declare-fun ref.next () Int)
(declare-fun headtail.spec.send_idx () Int)
(declare-fun tx (msg) Int)
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:tx| (tx |__fml:p|))
     (< headtail.spec.recv_idx headtail.spec.send_idx)
     (< |__new_fml:tx| ref.next)
     (<= 0 |__new_fml:tx|)
     (headtail.spec.sent headtail.spec.recv_idx |__fml:p|)
     (ref.serialized |__new_fml:tx|)
     (not htspec.queue.empty)
     (not (ref.committed |__new_fml:tx|))
     (= htspec.queue.empty (>= htspec.queue.tail htspec.queue.head))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= (ref.committed X__0) false)))))
(assert (= headtail.spec.send_idx 8))
(assert (= headtail.spec.recv_idx 3))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 3) true (= (val X__1) #xd95a) (= (tx X__1) 5)))
        (a!2 (and (= X__0 2) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 6) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!4 (and (= X__0 4) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!5 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!6 (and (= X__0 5) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!7 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!8 (and (= X__0 7) true (= (val X__1) #x4adc) (= (tx X__1) 7))))
    (and true
         (=> a!1 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!2 (= (headtail.spec.sent X__0 X__1) false))
         (=> a!3 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!4 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!5 (= (headtail.spec.sent X__0 X__1) false))
         (=> a!6 (= (headtail.spec.sent X__0 X__1) true))
         (=> a!7 (= (headtail.spec.sent X__0 X__1) false))
         (=> a!8 (= (headtail.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             (= (headtail.spec.sent X__0 X__1) false))))))
(assert (= htspec.queue.head 8))
(assert (= htspec.queue.tail 3))
(assert (= ref.next 9))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.serialized X__0) true))
       (=> (= X__0 1) (= (ref.serialized X__0) true))
       (=> (= X__0 2) (= (ref.serialized X__0) true))
       (=> (= X__0 3) (= (ref.serialized X__0) true))
       (=> (= X__0 4) (= (ref.serialized X__0) true))
       (=> (= X__0 5) (= (ref.serialized X__0) true))
       (=> (= X__0 6) (= (ref.serialized X__0) true))
       (=> (= X__0 7) (= (ref.serialized X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= (ref.serialized X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x4acb)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun htspec.queue.empty () Bool
  false)
(define-fun |__new_fml:tx| () Int
  5)
(define-fun htspec.queue.tail () Int
  3)
(define-fun headtail.spec.recv_idx () Int
  3)
(define-fun headtail.spec.send_idx () Int
  8)
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun ref.next () Int
  9)
(define-fun htspec.queue.head () Int
  8)
(define-fun k!95 () Int
  14)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.serialized!118 ((x!0 Int)) Bool
  (ite (= x!0 14) false
    true))
(define-fun k!116 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    14)))))))))
(define-fun ref.serialized ((x!0 Int)) Bool
  (ref.serialized!118 (k!116 x!0)))
(define-fun k!113 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    5))))
(define-fun ref.committed!117 ((x!0 Int)) Bool
  (ite (= x!0 5) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!117 (k!113 x!0)))
(define-fun k!114 ((x!0 msg)) msg
  msg!val!0)
(define-fun headtail.spec.sent!119 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 3) (= x!1 msg!val!0)) true
    false))
(define-fun k!115 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    14)))))))))
(define-fun headtail.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (headtail.spec.sent!119 (k!115 x!0) (k!114 x!1)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xd95a)
(define-fun tx ((x!0 msg)) Int
  5)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (or false (= X__0 0) (= X__0 1) (= X__0 2) (= X__0 5) true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 5)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xc564)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!23 () Int
  3)
(define-fun |alit:0| () Bool
  false)
(define-fun k!34 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    3)))))
(define-fun ref.committed!35 ((x!0 Int)) Bool
  (ite (= x!0 3) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!35 (k!34 x!0)))
(define-fun k!33 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    5))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!36 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
    #x0000))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!36 (k!33 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (or false (= X__0 0) (= X__0 1) (= X__0 2) (= X__0 5) true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 5)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x59dc)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!40 () Int
  3)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!52 ((x!0 Int)) Bool
  (ite (= x!0 3) false
    true))
(define-fun k!51 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
    3)))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!52 (k!51 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!53 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
    #x0000))))
(define-fun k!50 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    5))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!53 (k!50 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x5e1b)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x5e1b)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed false))
(assert (= clrq1.spec.recv_idx 3))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!2 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!3 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!4 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!5 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (or false a!1 a!2 a!3 a!4 a!5 (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 5))
(assert (= head.rep.value #x1d23))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xd447)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x015c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x1d23)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  true)
(define-fun clrq1.spec.recv_idx () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x1d23)
(define-fun k!83 () Int
  7)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x1d23)
(define-fun clrq1.spec.send_idx () Int
  5)
(define-fun master.tail_failed () Bool
  false)
(define-fun __ts0_a () Bool
  true)
(define-fun |alit:2| () Bool
  false)
(define-fun k!68 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x1d23)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  true)
(define-fun k!82 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!85 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 3) (= x!1 msg!val!0)) true
    false))
(define-fun k!84 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    7))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!85 (k!84 x!0) (k!82 x!1)))
(define-fun val!87 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x0ae5
    #xd447))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!87 (k!82 x!0)))
(define-fun tx!86 ((x!0 msg)) Int
  (ite (= x!0 msg!val!0) 8
    0))
(define-fun tx ((x!0 msg)) Int
  (tx!86 (k!82 x!0)))begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x579b)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x579b)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (or false (= X__0 0) (= X__0 1) (= X__0 2) (= X__0 5) true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 5)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x370b)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!57 () Int
  3)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!69 ((x!0 Int)) Bool
  (ite (= x!0 3) false
    true))
(define-fun k!68 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
    3)))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!69 (k!68 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!67 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
    5))))
(define-fun ref.txres!70 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
    #x0000))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!70 (k!67 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun master.tail_failed () Bool)
(assert (and (not master.tail_failed)))
(assert (= master.tail_failed false))
end sat:

(define-fun master.tail_failed () Bool
  false)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x7029)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!74 () Int
  9)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!98 ((x!0 Int)) Bool
  (ite (= x!0 9) false
    true))
(define-fun k!97 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 0) 0
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
    9))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!98 (k!97 x!0)))
(define-fun ref.txres!99 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 3) #x4c06
  (ite (= x!0 4) #x1014
  (ite (= x!0 6) #x7160
  (ite (= x!0 8) #x1d23
  (ite (= x!0 7) #xd247
    #x0000)))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!96 ((x!0 Int)) Int
  (ite (= x!0 0) 0
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
    5)))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!99 (k!96 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x55b5)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!103 () Int
  9)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!127 ((x!0 Int)) Bool
  (ite (= x!0 9) false
    true))
(define-fun k!126 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 0) 0
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
    9))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!127 (k!126 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!128 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 3) #x4c06
  (ite (= x!0 4) #x1014
  (ite (= x!0 6) #x7160
  (ite (= x!0 8) #x1d23
  (ite (= x!0 7) #xd247
    #x0000)))))))))
(define-fun k!125 ((x!0 Int)) Int
  (ite (= x!0 0) 0
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
    5)))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!128 (k!125 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xf632)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!132 () Int
  9)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!156 ((x!0 Int)) Bool
  (ite (= x!0 9) false
    true))
(define-fun k!155 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 0) 0
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 8) 8
    9))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!156 (k!155 x!0)))
(define-fun ref.txres!157 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 4) #x1014
  (ite (= x!0 6) #x7160
  (ite (= x!0 8) #x1d23
  (ite (= x!0 3) #x4c06
  (ite (= x!0 7) #xd247
    #x0000)))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!154 ((x!0 Int)) Int
  (ite (= x!0 0) 0
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
    5)))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!157 (k!154 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xea3d)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xea3d)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x6e5f)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x6e5f)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!2 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!3 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!4 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!5 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!6 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!7 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!8 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 5))
(assert (= clrq2.spec.send_idx 8))
(assert (= head.rep.value #x2808))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xc5fa)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x286c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!113 () Int
  11)
(define-fun clrq2.spec.recv_idx () Int
  5)
(define-fun clrq2.spec.send_idx () Int
  8)
(define-fun head.rep.value () (_ BitVec 16)
  #x2808)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!107 () Int
  9)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x2808)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x2808)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x2808)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!120 () Int
  12)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!119 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val!123 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x579b
    #x2808))
(define-fun k!121 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    12)))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!123 (k!119 x!0)))
(define-fun clrq2.spec.sent!122 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 5) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!122 (k!121 x!0) (k!119 x!1)))
(define-fun tx ((x!0 msg)) Int
  10)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!2 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!3 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!4 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!5 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!6 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!7 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!8 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 6))
(assert (= clrq2.spec.send_idx 8))
(assert (= head.rep.value #x7fa3))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6a55)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x8dbe)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!140 () Int
  10)
(define-fun clrq2.spec.recv_idx () Int
  6)
(define-fun clrq2.spec.send_idx () Int
  8)
(define-fun head.rep.value () (_ BitVec 16)
  #x7fa3)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x7fa3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x7fa3)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x7fa3)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!133 () Int
  9)
(define-fun k!127 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!142 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 6) (= x!1 msg!val!0)) true
    false))
(define-fun val!143 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xea3d
    #x7fa3))
(define-fun k!139 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!143 (k!139 x!0)))
(define-fun k!141 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 6) 6
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
    10)))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!142 (k!141 x!0) (k!139 x!1)))
(define-fun tx ((x!0 msg)) Int
  11)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xff36)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xff36)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 4))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!2 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!3 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!4 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!5 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (or false a!1 a!2 a!3 a!4 a!5 (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 5))
(assert (= head.rep.value #x69e0))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xc9af)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xfcf0)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x69e0)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  4)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x69e0)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x69e0)
(define-fun clrq1.spec.send_idx () Int
  5)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!91 () Int
  7)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x69e0)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!104 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!103 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!106 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 4) (= x!1 msg!val!0)) true
    false))
(define-fun k!105 ((x!0 Int)) Int
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
    8))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!106 (k!105 x!0) (k!103 x!1)))
(define-fun val!107 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x5e1b
    #x69e0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!107 (k!103 x!0)))
(define-fun tx ((x!0 msg)) Int
  9)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!3 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!4 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!5 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!6 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!7 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!8 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!9 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 7))
(assert (= clrq2.spec.send_idx 9))
(assert (= head.rep.value #xc7fb))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x1348)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xe80a)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  7)
(define-fun clrq2.spec.send_idx () Int
  9)
(define-fun head.rep.value () (_ BitVec 16)
  #xc7fb)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun k!147 () Int
  3)
(define-fun k!160 () Int
  11)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xc7fb)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xc7fb)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!153 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xc7fb)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!162 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 7) (= x!1 msg!val!0)) true
    false))
(define-fun k!159 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!161 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 7) 7
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
    11))))))))))
(define-fun val!163 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x6e5f
    #xc7fb))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!163 (k!159 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!162 (k!161 x!0) (k!159 x!1)))
(define-fun tx ((x!0 msg)) Int
  12)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!3 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!4 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!5 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!6 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!7 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!8 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!9 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 8))
(assert (= clrq2.spec.send_idx 9))
(assert (= head.rep.value #x365a))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x5a5b)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xab8e)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  8)
(define-fun clrq2.spec.send_idx () Int
  9)
(define-fun head.rep.value () (_ BitVec 16)
  #x365a)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!167 () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x365a)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x365a)
(define-fun k!173 () Int
  7)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x365a)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!180 () Int
  10)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!183 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xff36
    #x365a))
(define-fun clrq2.spec.sent!182 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 8) (= x!1 msg!val!0)) true
    false))
(define-fun k!179 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!183 (k!179 x!0)))
(define-fun k!181 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 8) 8
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    10))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!182 (k!181 x!0) (k!179 x!1)))
(define-fun tx ((x!0 msg)) Int
  13)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x2233)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x2233)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x4ea3)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  13)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x365a)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x365a)
(define-fun k!161 () Int
  14)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!191 ((x!0 Int)) Bool
  (ite (= x!0 14) false
    true))
(define-fun k!190 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 12) 12
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    14)))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!191 (k!190 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x365a)
(define-fun ref.txres!192 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 7) #xd247
  (ite (= x!0 3) #x4c06
  (ite (= x!0 0) #x0000
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 5) #x72ac
  (ite (= x!0 8) #x1d23
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 10) #x2808
  (ite (= x!0 6) #x7160
  (ite (= x!0 9) #x69e0
  (ite (= x!0 4) #x1014
  (ite (= x!0 2) #x7ccd
    #x365a))))))))))))))
(define-fun k!189 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    5))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!192 (k!189 x!0)))
(define-fun tx ((x!0 msg)) Int
  13)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x8c1c)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x8c1c)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xd3c4)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xd3c4)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x2e20)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  13)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x365a)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x365a)
(define-fun k!196 () Int
  14)
(define-fun |alit:0| () Bool
  false)
(define-fun k!225 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 12) 12
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    14)))))))))))))))
(define-fun ref.committed!226 ((x!0 Int)) Bool
  (ite (= x!0 14) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!226 (k!225 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x365a)
(define-fun k!224 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 3) 3
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    5))))))))))))))
(define-fun ref.txres!227 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 7) #xd247
  (ite (= x!0 3) #x4c06
  (ite (= x!0 0) #x0000
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 5) #x72ac
  (ite (= x!0 8) #x1d23
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 10) #x2808
  (ite (= x!0 6) #x7160
  (ite (= x!0 9) #x69e0
  (ite (= x!0 4) #x1014
  (ite (= x!0 2) #x7ccd
    #x365a))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!227 (k!224 x!0)))
(define-fun tx ((x!0 msg)) Int
  13)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xcc33)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xcc33)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x5850)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x5850)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!4 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!5 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!6 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!7 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!8 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!9 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!10 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!11 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!12 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!13 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 9))
(assert (= clrq2.spec.send_idx 13))
(assert (= head.rep.value #x3590))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x2c14)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x5dd9)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!187 () Int
  3)
(define-fun k!193 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  9)
(define-fun clrq2.spec.send_idx () Int
  13)
(define-fun head.rep.value () (_ BitVec 16)
  #x3590)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!200 () Int
  7)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x3590)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x3590)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x3590)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!202 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 9) (= x!1 msg!val!0)) true
    false))
(define-fun k!199 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!201 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 9) 9
  (ite (= x!0 3) 3
  (ite (= x!0 12) 12
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 8) 8
  (ite (= x!0 10) 10
  (ite (= x!0 11) 11
    7)))))))))))))
(define-fun val!203 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x2233
    #x3590))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!203 (k!199 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!202 (k!201 x!0) (k!199 x!1)))
(define-fun tx ((x!0 msg)) Int
  14)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xf8f6)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xf8f6)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 5))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!2 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!3 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!4 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!5 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!6 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!7 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 7))
(assert (= head.rep.value #x57c3))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x0401)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xc1b4)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!111 () Int
  10)
(define-fun head.rep.value () (_ BitVec 16)
  #x57c3)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  5)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x57c3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x57c3)
(define-fun clrq1.spec.send_idx () Int
  7)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x57c3)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!122 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!124 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 5) (= x!1 msg!val!0)) true
    false))
(define-fun k!123 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
    10))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!124 (k!123 x!0) (k!122 x!1)))
(define-fun val!125 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xcc33
    #x57c3))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!125 (k!122 x!0)))
(define-fun tx ((x!0 msg)) Int
  17)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 6))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!4 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!5 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!6 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!7 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 7))
(assert (= head.rep.value #x23f6))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x7e23)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xcd1a)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x23f6)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  6)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x23f6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x23f6)
(define-fun clrq1.spec.send_idx () Int
  7)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x23f6)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!129 () Int
  3)
(define-fun k!142 () Int
  9)
(define-fun k!135 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!143 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 6) 6
  (ite (= x!0 4) 4
    9))))))))
(define-fun k!141 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!144 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 6) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!144 (k!143 x!0) (k!141 x!1)))
(define-fun val!145 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xf8f6
    #x23f6))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!145 (k!141 x!0)))
(define-fun tx ((x!0 msg)) Int
  19)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xcf25)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xcf25)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!5 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!6 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!7 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!8 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!9 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!10 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!11 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!12 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!13 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!14 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 10))
(assert (= clrq2.spec.send_idx 14))
(assert (= head.rep.value #x1cec))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6384)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x413a)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  10)
(define-fun clrq2.spec.send_idx () Int
  14)
(define-fun head.rep.value () (_ BitVec 16)
  #x1cec)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!200 () Int
  3)
(define-fun k!213 () Int
  8)
(define-fun |alit:3| () Bool
  false)
(define-fun k!207 () Int
  4)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x1cec)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x1cec)
(define-fun k!220 () Int
  9)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x1cec)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!222 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 10) (= x!1 msg!val!0)) true
    false))
(define-fun val!223 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x8c1c
    #x1cec))
(define-fun k!219 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!223 (k!219 x!0)))
(define-fun k!221 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 10) 10
  (ite (= x!0 3) 3
  (ite (= x!0 12) 12
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 8) 8
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
    9))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!222 (k!221 x!0) (k!219 x!1)))
(define-fun tx ((x!0 msg)) Int
  15)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xd844)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xd844)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x46bc)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x46bc)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x5be9)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x5be9)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x8153)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x8153)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xd2d2)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xd2d2)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 7))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!6 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!7 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!8 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!9 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!10 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!11 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 11))
(assert (= head.rep.value #xa908))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x7e85)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xd054)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!149 () Int
  3)
(define-fun head.rep.value () (_ BitVec 16)
  #xa908)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!162 () Int
  8)
(define-fun clrq1.spec.recv_idx () Int
  7)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xa908)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xa908)
(define-fun clrq1.spec.send_idx () Int
  11)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!155 () Int
  5)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xa908)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!161 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!164 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 7) (= x!1 msg!val!0)) true
    false))
(define-fun k!163 ((x!0 Int)) Int
  (ite (= x!0 10) 10
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 9) 9
  (ite (= x!0 7) 7
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
    8)))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!164 (k!163 x!0) (k!161 x!1)))
(define-fun val!165 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xd844
    #xa908))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!165 (k!161 x!0)))
(define-fun tx ((x!0 msg)) Int
  21)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xaf98)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xaf98)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x9a87)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x9a87)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!17 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 11))
(assert (= clrq2.spec.send_idx 17))
(assert (= head.rep.value #x814c))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x2870)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x288a)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  11)
(define-fun clrq2.spec.send_idx () Int
  17)
(define-fun head.rep.value () (_ BitVec 16)
  #x814c)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!227 () Int
  4)
(define-fun k!233 () Int
  6)
(define-fun |alit:3| () Bool
  false)
(define-fun k!240 () Int
  7)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x814c)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x814c)
(define-fun k!220 () Int
  3)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x814c)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!239 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!241 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 11) 11
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 6) 6
  (ite (= x!0 8) 8
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
    7)))))))))))))))))
(define-fun val!243 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xd3c4
    #x814c))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!243 (k!239 x!0)))
(define-fun clrq2.spec.sent!242 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 11) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!242 (k!241 x!0) (k!239 x!1)))
(define-fun tx ((x!0 msg)) Int
  16)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 8))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!6 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!7 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!8 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!9 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!10 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!11 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 11))
(assert (= head.rep.value #x5510))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x674e)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xed59)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!169 () Int
  4)
(define-fun k!182 () Int
  9)
(define-fun head.rep.value () (_ BitVec 16)
  #x5510)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!162 () Int
  3)
(define-fun clrq1.spec.recv_idx () Int
  8)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x5510)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x5510)
(define-fun clrq1.spec.send_idx () Int
  11)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x5510)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!175 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!183 ((x!0 Int)) Int
  (ite (= x!0 10) 10
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 4) 4
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
    9)))))))))))
(define-fun val!185 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x46bc
    #x5510))
(define-fun k!181 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!184 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 8) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!184 (k!183 x!0) (k!181 x!1)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!185 (k!181 x!0)))
(define-fun tx ((x!0 msg)) Int
  22)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x08ec)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x08ec)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!17 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!18 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 12))
(assert (= clrq2.spec.send_idx 18))
(assert (= head.rep.value #x9bcc))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xb885)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x2b8c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  12)
(define-fun clrq2.spec.send_idx () Int
  18)
(define-fun head.rep.value () (_ BitVec 16)
  #x9bcc)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!247 () Int
  4)
(define-fun k!260 () Int
  8)
(define-fun |alit:3| () Bool
  false)
(define-fun k!240 () Int
  3)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x9bcc)
(define-fun k!253 () Int
  6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x9bcc)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x9bcc)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!263 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x5850
    #x9bcc))
(define-fun k!259 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!263 (k!259 x!0)))
(define-fun clrq2.spec.sent!262 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 12) (= x!1 msg!val!0)) true
    false))
(define-fun k!261 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 12) 12
  (ite (= x!0 3) 3
  (ite (= x!0 17) 17
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 7) 7
  (ite (= x!0 6) 6
  (ite (= x!0 14) 14
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    8))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!262 (k!261 x!0) (k!259 x!1)))
(define-fun tx ((x!0 msg)) Int
  18)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 9))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!6 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!7 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!8 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!9 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!10 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!11 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 11))
(assert (= head.rep.value #xf41c))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x4c22)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x45e4)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!182 () Int
  3)
(define-fun head.rep.value () (_ BitVec 16)
  #xf41c)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!202 () Int
  8)
(define-fun clrq1.spec.recv_idx () Int
  9)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xf41c)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xf41c)
(define-fun clrq1.spec.send_idx () Int
  11)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xf41c)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!195 () Int
  7)
(define-fun k!189 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq1.spec.sent!204 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 9) (= x!1 msg!val!0)) true
    false))
(define-fun k!201 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!203 ((x!0 Int)) Int
  (ite (= x!0 10) 10
  (ite (= x!0 5) 5
  (ite (= x!0 9) 9
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
    8)))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!204 (k!203 x!0) (k!201 x!1)))
(define-fun val!205 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x5be9
    #xf41c))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!205 (k!201 x!0)))
(define-fun tx ((x!0 msg)) Int
  23)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!17 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!18 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 13))
(assert (= clrq2.spec.send_idx 18))
(assert (= head.rep.value #x5005))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x4dbc)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x66b4)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  13)
(define-fun clrq2.spec.send_idx () Int
  18)
(define-fun head.rep.value () (_ BitVec 16)
  #x5005)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!260 () Int
  3)
(define-fun k!273 () Int
  6)
(define-fun |alit:3| () Bool
  false)
(define-fun k!267 () Int
  4)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x5005)
(define-fun k!280 () Int
  7)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x5005)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x5005)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!279 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!281 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 13) 13
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 17) 17
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 12) 12
  (ite (= x!0 8) 8
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    7))))))))))))))))))
(define-fun val!283 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xcf25
    #x5005))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!283 (k!279 x!0)))
(define-fun clrq2.spec.sent!282 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 13) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!282 (k!281 x!0) (k!279 x!1)))
(define-fun tx ((x!0 msg)) Int
  20)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x4393)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  23)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xf41c)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xf41c)
(define-fun k!231 () Int
  24)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!273 ((x!0 Int)) Bool
  (ite (= x!0 24) false
    true))
(define-fun k!272 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    24)))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!273 (k!272 x!0)))
(define-fun k!271 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    15))))))))))))))))))))))))
(define-fun ref.txres!274 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 17) #x57c3
  (ite (= x!0 3) #x4c06
  (ite (= x!0 16) #x814c
  (ite (= x!0 19) #x23f6
  (ite (= x!0 13) #x365a
  (ite (= x!0 21) #xa908
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 9) #x69e0
  (ite (= x!0 22) #x5510
  (ite (= x!0 8) #x1d23
  (ite (= x!0 20) #x5005
  (ite (= x!0 7) #xd247
  (ite (= x!0 10) #x2808
  (ite (= x!0 5) #x72ac
  (ite (= x!0 14) #x3590
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 15) #x1cec
  (ite (= x!0 0) #x0000
  (ite (= x!0 6) #x7160
  (ite (= x!0 4) #x1014
    #xf41c))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xf41c)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!274 (k!271 x!0)))
(define-fun tx ((x!0 msg)) Int
  23)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xc0ef)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xc0ef)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x06d4)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x06d4)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!17 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!18 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!19 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 14))
(assert (= clrq2.spec.send_idx 19))
(assert (= head.rep.value #x1f2a))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xe135)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x10c7)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!300 () Int
  8)
(define-fun clrq2.spec.recv_idx () Int
  14)
(define-fun clrq2.spec.send_idx () Int
  19)
(define-fun head.rep.value () (_ BitVec 16)
  #x1f2a)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun k!280 () Int
  3)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x1f2a)
(define-fun k!293 () Int
  6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x1f2a)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!287 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x1f2a)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!302 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 14) (= x!1 msg!val!0)) true
    false))
(define-fun val!303 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x8153
    #x1f2a))
(define-fun k!299 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!303 (k!299 x!0)))
(define-fun k!301 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 6) 6
  (ite (= x!0 7) 7
  (ite (= x!0 12) 12
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    8)))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!302 (k!301 x!0) (k!299 x!1)))
(define-fun tx ((x!0 msg)) Int
  24)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x7f12)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  24)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x1f2a)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x1f2a)
(define-fun k!278 () Int
  25)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!320 ((x!0 Int)) Bool
  (ite (= x!0 25) false
    true))
(define-fun k!319 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 9) 9
    25))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!320 (k!319 x!0)))
(define-fun k!318 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 23) 23
    15)))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x1f2a)
(define-fun ref.txres!321 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 17) #x57c3
  (ite (= x!0 15) #x1cec
  (ite (= x!0 13) #x365a
  (ite (= x!0 10) #x2808
  (ite (= x!0 4) #x1014
  (ite (= x!0 19) #x23f6
  (ite (= x!0 6) #x7160
  (ite (= x!0 16) #x814c
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 0) #x0000
  (ite (= x!0 22) #x5510
  (ite (= x!0 8) #x1d23
  (ite (= x!0 23) #xf41c
  (ite (= x!0 14) #x3590
  (ite (= x!0 7) #xd247
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 20) #x5005
  (ite (= x!0 3) #x4c06
  (ite (= x!0 21) #xa908
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 9) #x69e0
    #x1f2a)))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!321 (k!318 x!0)))
(define-fun tx ((x!0 msg)) Int
  24)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!17 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!18 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!19 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 15))
(assert (= clrq2.spec.send_idx 19))
(assert (= head.rep.value #xa07d))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x45e5)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xd7f8)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!300 () Int
  3)
(define-fun clrq2.spec.recv_idx () Int
  15)
(define-fun clrq2.spec.send_idx () Int
  19)
(define-fun head.rep.value () (_ BitVec 16)
  #xa07d)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!320 () Int
  9)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xa07d)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xa07d)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!313 () Int
  7)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xa07d)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!307 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!319 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val!323 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xaf98
    #xa07d))
(define-fun k!321 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 6) 6
  (ite (= x!0 7) 7
  (ite (= x!0 12) 12
  (ite (= x!0 8) 8
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
    9)))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!323 (k!319 x!0)))
(define-fun clrq2.spec.sent!322 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 15) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!322 (k!321 x!0) (k!319 x!1)))
(define-fun tx ((x!0 msg)) Int
  26)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 26)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 26)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xd6f4)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  26)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xa07d)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xa07d)
(define-fun k!325 () Int
  25)
(define-fun |alit:0| () Bool
  false)
(define-fun k!366 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 26) 26
  (ite (= x!0 24) 24
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    25)))))))))))))))))))))))))))
(define-fun ref.committed!367 ((x!0 Int)) Bool
  (ite (= x!0 25) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!367 (k!366 x!0)))
(define-fun ref.txres!368 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 15) #x1cec
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 7) #xd247
  (ite (= x!0 17) #x57c3
  (ite (= x!0 8) #x1d23
  (ite (= x!0 3) #x4c06
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 19) #x23f6
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 23) #xf41c
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 4) #x1014
  (ite (= x!0 10) #x2808
  (ite (= x!0 9) #x69e0
  (ite (= x!0 21) #xa908
  (ite (= x!0 5) #x72ac
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 16) #x814c
  (ite (= x!0 22) #x5510
  (ite (= x!0 14) #x3590
  (ite (= x!0 13) #x365a
  (ite (= x!0 20) #x5005
  (ite (= x!0 0) #x0000
  (ite (= x!0 6) #x7160
    #xa07d))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xa07d)
(define-fun k!365 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 9) 9
    15))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!368 (k!365 x!0)))
(define-fun tx ((x!0 msg)) Int
  26)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!17 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!18 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!19 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 16))
(assert (= clrq2.spec.send_idx 19))
(assert (= head.rep.value #x5015))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x626c)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xb2ae)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  16)
(define-fun clrq2.spec.send_idx () Int
  19)
(define-fun head.rep.value () (_ BitVec 16)
  #x5015)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!320 () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x5015)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x5015)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!333 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x5015)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!327 () Int
  4)
(define-fun k!340 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!343 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x9a87
    #x5015))
(define-fun k!339 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!343 (k!339 x!0)))
(define-fun clrq2.spec.sent!342 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 16) (= x!1 msg!val!0)) true
    false))
(define-fun k!341 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 16) 16
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 6) 6
  (ite (= x!0 12) 12
  (ite (= x!0 8) 8
  (ite (= x!0 10) 10
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    7)))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!342 (k!341 x!0) (k!339 x!1)))
(define-fun tx ((x!0 msg)) Int
  27)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!17 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!18 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!19 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 17))
(assert (= clrq2.spec.send_idx 19))
(assert (= head.rep.value #xea9c))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x7aa6)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x02b4)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  17)
(define-fun clrq2.spec.send_idx () Int
  19)
(define-fun head.rep.value () (_ BitVec 16)
  #xea9c)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!360 () Int
  8)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xea9c)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xea9c)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!347 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xea9c)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!340 () Int
  3)
(define-fun k!353 () Int
  6)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!359 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val!363 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x08ec
    #xea9c))
(define-fun k!361 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 17) 17
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 18) 18
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 6) 6
  (ite (= x!0 7) 7
  (ite (= x!0 12) 12
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    8)))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!363 (k!359 x!0)))
(define-fun clrq2.spec.sent!362 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 17) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!362 (k!361 x!0) (k!359 x!1)))
(define-fun tx ((x!0 msg)) Int
  28)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x29cb)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  28)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xea9c)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xea9c)
(define-fun k!372 () Int
  25)
(define-fun |alit:0| () Bool
  false)
(define-fun k!413 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 28) 28
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    25)))))))))))))))))))))))))))))
(define-fun ref.committed!414 ((x!0 Int)) Bool
  (ite (= x!0 25) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!414 (k!413 x!0)))
(define-fun k!412 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 28) 28
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    15))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xea9c)
(define-fun ref.txres!415 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 17) #x57c3
  (ite (= x!0 23) #xf41c
  (ite (= x!0 16) #x814c
  (ite (= x!0 8) #x1d23
  (ite (= x!0 0) #x0000
  (ite (= x!0 22) #x5510
  (ite (= x!0 15) #x1cec
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 7) #xd247
  (ite (= x!0 26) #xa07d
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 4) #x1014
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 19) #x23f6
  (ite (= x!0 21) #xa908
  (ite (= x!0 9) #x69e0
  (ite (= x!0 13) #x365a
  (ite (= x!0 27) #x5015
  (ite (= x!0 14) #x3590
  (ite (= x!0 10) #x2808
  (ite (= x!0 6) #x7160
  (ite (= x!0 5) #x72ac
  (ite (= x!0 20) #x5005
  (ite (= x!0 3) #x4c06
    #xea9c))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!415 (k!412 x!0)))
(define-fun tx ((x!0 msg)) Int
  28)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!12 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!15 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!17 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!18 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!19 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 18))
(assert (= clrq2.spec.send_idx 19))
(assert (= head.rep.value #xf388))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6b80)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x606e)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  18)
(define-fun clrq2.spec.send_idx () Int
  19)
(define-fun head.rep.value () (_ BitVec 16)
  #xf388)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!360 () Int
  3)
(define-fun k!373 () Int
  6)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xf388)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xf388)
(define-fun k!380 () Int
  7)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xf388)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!367 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!382 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 18) (= x!1 msg!val!0)) true
    false))
(define-fun val!383 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x06d4
    #xf388))
(define-fun k!379 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!383 (k!379 x!0)))
(define-fun k!381 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 18) 18
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 0) 0
  (ite (= x!0 2) 2
  (ite (= x!0 17) 17
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 6) 6
  (ite (= x!0 12) 12
  (ite (= x!0 8) 8
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    7)))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!382 (k!381 x!0) (k!379 x!1)))
(define-fun tx ((x!0 msg)) Int
  30)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 10))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!6 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!7 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!8 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!9 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!10 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!11 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!12 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 12))
(assert (= head.rep.value #xfa5c))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x1ded)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xaad3)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #xfa5c)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!202 () Int
  3)
(define-fun clrq1.spec.recv_idx () Int
  10)
(define-fun |alit:3| () Bool
  false)
(define-fun k!215 () Int
  7)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xfa5c)
(define-fun k!209 () Int
  4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xfa5c)
(define-fun clrq1.spec.send_idx () Int
  12)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xfa5c)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!222 () Int
  11)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!223 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 10) 10
  (ite (= x!0 4) 4
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
    11))))))))))))
(define-fun clrq1.spec.sent!224 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 10) (= x!1 msg!val!0)) true
    false))
(define-fun k!221 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!224 (k!223 x!0) (k!221 x!1)))
(define-fun val!225 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xd2d2
    #xfa5c))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!225 (k!221 x!0)))
(define-fun tx ((x!0 msg)) Int
  25)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 11))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!6 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!7 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!8 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!9 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!10 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!11 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!12 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 12))
(assert (= head.rep.value #xcd2e))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x049a)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xb218)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #xcd2e)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!229 () Int
  4)
(define-fun clrq1.spec.recv_idx () Int
  11)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xcd2e)
(define-fun k!242 () Int
  8)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xcd2e)
(define-fun clrq1.spec.send_idx () Int
  12)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xcd2e)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!222 () Int
  3)
(define-fun k!235 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!241 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!244 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 11) (= x!1 msg!val!0)) true
    false))
(define-fun k!243 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 11) 11
  (ite (= x!0 4) 4
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 9) 9
    8))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!244 (k!243 x!0) (k!241 x!1)))
(define-fun val!245 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xc0ef
    #xcd2e))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!245 (k!241 x!0)))
(define-fun tx ((x!0 msg)) Int
  29)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xa191)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xa191)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x01ff)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x01ff)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xc4d9)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  30)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xf388)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xf388)
(define-fun k!419 () Int
  31)
(define-fun |alit:0| () Bool
  false)
(define-fun k!466 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    31))))))))))))))))))))))))))))))))
(define-fun ref.committed!467 ((x!0 Int)) Bool
  (ite (= x!0 31) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!467 (k!466 x!0)))
(define-fun ref.txres!468 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 4) #x1014
  (ite (= x!0 15) #x1cec
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 8) #x1d23
  (ite (= x!0 21) #xa908
  (ite (= x!0 10) #x2808
  (ite (= x!0 17) #x57c3
  (ite (= x!0 0) #x0000
  (ite (= x!0 7) #xd247
  (ite (= x!0 28) #xea9c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 16) #x814c
  (ite (= x!0 14) #x3590
  (ite (= x!0 13) #x365a
  (ite (= x!0 27) #x5015
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 3) #x4c06
  (ite (= x!0 6) #x7160
  (ite (= x!0 5) #x72ac
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 26) #xa07d
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 9) #x69e0
  (ite (= x!0 19) #x23f6
    #xf388)))))))))))))))))))))))))))))))
(define-fun k!465 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xf388)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!468 (k!465 x!0)))
(define-fun tx ((x!0 msg)) Int
  30)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x4115)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  30)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xf388)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xf388)
(define-fun k!472 () Int
  31)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!520 ((x!0 Int)) Bool
  (ite (= x!0 31) false
    true))
(define-fun k!519 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    31))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!520 (k!519 x!0)))
(define-fun ref.txres!521 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 4) #x1014
  (ite (= x!0 15) #x1cec
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 8) #x1d23
  (ite (= x!0 10) #x2808
  (ite (= x!0 21) #xa908
  (ite (= x!0 9) #x69e0
  (ite (= x!0 14) #x3590
  (ite (= x!0 7) #xd247
  (ite (= x!0 13) #x365a
  (ite (= x!0 27) #x5015
  (ite (= x!0 28) #xea9c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 26) #xa07d
  (ite (= x!0 17) #x57c3
  (ite (= x!0 0) #x0000
  (ite (= x!0 20) #x5005
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 22) #x5510
  (ite (= x!0 6) #x7160
  (ite (= x!0 3) #x4c06
  (ite (= x!0 16) #x814c
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 19) #x23f6
  (ite (= x!0 5) #x72ac
    #xf388)))))))))))))))))))))))))))))))
(define-fun k!518 ((x!0 Int)) Int
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xf388)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!521 (k!518 x!0)))
(define-fun tx ((x!0 msg)) Int
  30)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 12))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!8 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!10 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!11 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!12 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!13 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 13))
(assert (= head.rep.value #x8e1d))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xb662)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x5369)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x8e1d)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  12)
(define-fun |alit:3| () Bool
  false)
(define-fun k!262 () Int
  10)
(define-fun k!255 () Int
  7)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x8e1d)
(define-fun k!242 () Int
  3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x8e1d)
(define-fun clrq1.spec.send_idx () Int
  13)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!249 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x8e1d)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!263 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 12) 12
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    10)))))))))))))
(define-fun clrq1.spec.sent!264 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 12) (= x!1 msg!val!0)) true
    false))
(define-fun k!261 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!264 (k!263 x!0) (k!261 x!1)))
(define-fun val!265 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xa191
    #x8e1d))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!265 (k!261 x!0)))
(define-fun tx ((x!0 msg)) Int
  31)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x843e)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x843e)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x31ff)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  31)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x8e1d)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x8e1d)
(define-fun k!525 () Int
  32)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!573 ((x!0 Int)) Bool
  (ite (= x!0 32) false
    true))
(define-fun k!572 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    32)))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!573 (k!572 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x8e1d)
(define-fun k!571 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15))))))))))))))))))))))))))))))))
(define-fun ref.txres!574 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 14) #x3590
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 15) #x1cec
  (ite (= x!0 19) #x23f6
  (ite (= x!0 13) #x365a
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 17) #x57c3
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 0) #x0000
  (ite (= x!0 10) #x2808
  (ite (= x!0 9) #x69e0
  (ite (= x!0 28) #xea9c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 27) #x5015
  (ite (= x!0 4) #x1014
  (ite (= x!0 26) #xa07d
  (ite (= x!0 21) #xa908
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 7) #xd247
  (ite (= x!0 8) #x1d23
  (ite (= x!0 3) #x4c06
  (ite (= x!0 6) #x7160
  (ite (= x!0 30) #xf388
  (ite (= x!0 5) #x72ac
  (ite (= x!0 16) #x814c
    #x8e1d))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!574 (k!571 x!0)))
(define-fun tx ((x!0 msg)) Int
  31)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!4 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!5 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!6 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!7 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!8 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!9 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!10 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!11 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!12 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!13 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!14 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!15 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!16 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!17 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!18 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!19 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!20 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!21 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 19))
(assert (= clrq2.spec.send_idx 21))
(assert (= head.rep.value #x2fae))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x5d0d)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xfe8c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!387 () Int
  4)
(define-fun clrq2.spec.recv_idx () Int
  19)
(define-fun clrq2.spec.send_idx () Int
  21)
(define-fun head.rep.value () (_ BitVec 16)
  #x2fae)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x2fae)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x2fae)
(define-fun k!380 () Int
  3)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x2fae)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!393 () Int
  6)
(define-fun k!400 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!399 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq2.spec.sent!402 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 19) (= x!1 msg!val!0)) true
    false))
(define-fun val!403 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x01ff
    #x2fae))
(define-fun k!401 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 19) 19
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 4) 4
  (ite (= x!0 1) 1
  (ite (= x!0 6) 6
  (ite (= x!0 7) 7
  (ite (= x!0 12) 12
  (ite (= x!0 10) 10
  (ite (= x!0 16) 16
  (ite (= x!0 13) 13
  (ite (= x!0 9) 9
  (ite (= x!0 20) 20
  (ite (= x!0 11) 11
    8)))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!403 (k!399 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!402 (k!401 x!0) (k!399 x!1)))
(define-fun tx ((x!0 msg)) Int
  32)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x756a)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x756a)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x11b2)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x11b2)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x9816)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  32)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x2fae)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x2fae)
(define-fun k!578 () Int
  33)
(define-fun |alit:0| () Bool
  false)
(define-fun k!625 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    33))))))))))))))))))))))))))))))))))
(define-fun ref.committed!626 ((x!0 Int)) Bool
  (ite (= x!0 33) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!626 (k!625 x!0)))
(define-fun ref.txres!627 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 17) #x57c3
  (ite (= x!0 26) #xa07d
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 9) #x69e0
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 15) #x1cec
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 4) #x1014
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 22) #x5510
  (ite (= x!0 16) #x814c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
  (ite (= x!0 13) #x365a
  (ite (= x!0 28) #xea9c
  (ite (= x!0 27) #x5015
  (ite (= x!0 5) #x72ac
  (ite (= x!0 19) #x23f6
  (ite (= x!0 0) #x0000
  (ite (= x!0 8) #x1d23
  (ite (= x!0 3) #x4c06
  (ite (= x!0 6) #x7160
  (ite (= x!0 7) #xd247
  (ite (= x!0 10) #x2808
  (ite (= x!0 20) #x5005
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 30) #xf388
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 14) #x3590
    #x2fae)))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x2fae)
(define-fun k!624 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!627 (k!624 x!0)))
(define-fun tx ((x!0 msg)) Int
  32)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xd600)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  32)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x2fae)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x2fae)
(define-fun k!631 () Int
  33)
(define-fun |alit:0| () Bool
  false)
(define-fun k!678 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    33))))))))))))))))))))))))))))))))))
(define-fun ref.committed!679 ((x!0 Int)) Bool
  (ite (= x!0 33) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!679 (k!678 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x2fae)
(define-fun ref.txres!680 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 17) #x57c3
  (ite (= x!0 26) #xa07d
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 9) #x69e0
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 15) #x1cec
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 7) #xd247
  (ite (= x!0 30) #xf388
  (ite (= x!0 0) #x0000
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 27) #x5015
  (ite (= x!0 3) #x4c06
  (ite (= x!0 10) #x2808
  (ite (= x!0 8) #x1d23
  (ite (= x!0 5) #x72ac
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 16) #x814c
  (ite (= x!0 28) #xea9c
  (ite (= x!0 19) #x23f6
  (ite (= x!0 14) #x3590
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 4) #x1014
  (ite (= x!0 13) #x365a
  (ite (= x!0 6) #x7160
    #x2fae)))))))))))))))))))))))))))))))))
(define-fun k!677 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!680 (k!677 x!0)))
(define-fun tx ((x!0 msg)) Int
  32)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x2650)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x2650)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xb29f)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xb29f)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x5e98)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  32)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x2fae)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x2fae)
(define-fun k!684 () Int
  33)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!732 ((x!0 Int)) Bool
  (ite (= x!0 33) false
    true))
(define-fun k!731 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    33))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!732 (k!731 x!0)))
(define-fun ref.txres!733 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 7) #xd247
  (ite (= x!0 20) #x5005
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 28) #xea9c
  (ite (= x!0 3) #x4c06
  (ite (= x!0 9) #x69e0
  (ite (= x!0 15) #x1cec
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 4) #x1014
  (ite (= x!0 5) #x72ac
  (ite (= x!0 14) #x3590
  (ite (= x!0 0) #x0000
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 6) #x7160
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 17) #x57c3
  (ite (= x!0 30) #xf388
  (ite (= x!0 27) #x5015
  (ite (= x!0 26) #xa07d
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 22) #x5510
  (ite (= x!0 16) #x814c
  (ite (= x!0 8) #x1d23
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 19) #x23f6
  (ite (= x!0 23) #xf41c
  (ite (= x!0 13) #x365a
  (ite (= x!0 21) #xa908
  (ite (= x!0 10) #x2808
    #x2fae)))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x2fae)
(define-fun k!730 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!733 (k!730 x!0)))
(define-fun tx ((x!0 msg)) Int
  32)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xe1a7)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!737 () Int
  33)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!785 ((x!0 Int)) Bool
  (ite (= x!0 33) false
    true))
(define-fun k!784 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    33))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!785 (k!784 x!0)))
(define-fun k!783 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!786 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 7) #xd247
  (ite (= x!0 15) #x1cec
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 9) #x69e0
  (ite (= x!0 13) #x365a
  (ite (= x!0 26) #xa07d
  (ite (= x!0 23) #xf41c
  (ite (= x!0 28) #xea9c
  (ite (= x!0 5) #x72ac
  (ite (= x!0 32) #x2fae
  (ite (= x!0 8) #x1d23
  (ite (= x!0 4) #x1014
  (ite (= x!0 30) #xf388
  (ite (= x!0 21) #xa908
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 6) #x7160
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 19) #x23f6
  (ite (= x!0 27) #x5015
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 16) #x814c
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 17) #x57c3
  (ite (= x!0 3) #x4c06
  (ite (= x!0 14) #x3590
  (ite (= x!0 10) #x2808
  (ite (= x!0 11) #x7fa3
    #x0000)))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!786 (k!783 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!16 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!17 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!18 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!19 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!20 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!21 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!22 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!23 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!24 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!25 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 20))
(assert (= clrq2.spec.send_idx 25))
(assert (= head.rep.value #x31ad))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x03ab)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xa4d5)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!413 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  20)
(define-fun clrq2.spec.send_idx () Int
  25)
(define-fun head.rep.value () (_ BitVec 16)
  #x31ad)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!420 () Int
  7)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x31ad)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x31ad)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!407 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x31ad)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!400 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!423 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x843e
    #x31ad))
(define-fun k!419 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!423 (k!419 x!0)))
(define-fun clrq2.spec.sent!422 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 20) (= x!1 msg!val!0)) true
    false))
(define-fun k!421 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
    7)))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!422 (k!421 x!0) (k!419 x!1)))
(define-fun tx ((x!0 msg)) Int
  33)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!16 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!17 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!18 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!19 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!20 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!21 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!22 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!23 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!24 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!25 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 21))
(assert (= clrq2.spec.send_idx 25))
(assert (= head.rep.value #xb5eb))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xa08e)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xa02e)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!440 () Int
  8)
(define-fun clrq2.spec.recv_idx () Int
  21)
(define-fun clrq2.spec.send_idx () Int
  25)
(define-fun head.rep.value () (_ BitVec 16)
  #xb5eb)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!427 () Int
  4)
(define-fun k!420 () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xb5eb)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xb5eb)
(define-fun k!433 () Int
  6)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xb5eb)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!439 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq2.spec.sent!442 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 21) (= x!1 msg!val!0)) true
    false))
(define-fun k!441 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 21) 21
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
    8)))))))))))))))))))))))))
(define-fun val!443 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x756a
    #xb5eb))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!443 (k!439 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!442 (k!441 x!0) (k!439 x!1)))
(define-fun tx ((x!0 msg)) Int
  34)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x38de)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x38de)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x971b)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x971b)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x3d0d)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x3d0d)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x328b)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!790 () Int
  35)
(define-fun |alit:0| () Bool
  false)
(define-fun k!837 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    35))))))))))))))))))))))))))))))))))))
(define-fun ref.committed!838 ((x!0 Int)) Bool
  (ite (= x!0 35) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!838 (k!837 x!0)))
(define-fun k!836 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 0) 0
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
    15)))))))))))))))))))))))))))))))))))
(define-fun ref.txres!839 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 15) #x1cec
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 9) #x69e0
  (ite (= x!0 13) #x365a
  (ite (= x!0 16) #x814c
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 26) #xa07d
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 4) #x1014
  (ite (= x!0 17) #x57c3
  (ite (= x!0 32) #x2fae
  (ite (= x!0 30) #xf388
  (ite (= x!0 10) #x2808
  (ite (= x!0 28) #xea9c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
  (ite (= x!0 27) #x5015
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 6) #x7160
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 8) #x1d23
  (ite (= x!0 19) #x23f6
  (ite (= x!0 3) #x4c06
  (ite (= x!0 33) #x31ad
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 7) #xd247
  (ite (= x!0 5) #x72ac
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 20) #x5005
  (ite (= x!0 14) #x3590
  (ite (= x!0 22) #x5510
    #x0000)))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!839 (k!836 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x2ee3)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x2ee3)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!16 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!17 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!18 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!19 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!21 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!22 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!24 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!25 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!26 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!27 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 22))
(assert (= clrq2.spec.send_idx 27))
(assert (= head.rep.value #x2b55))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x3092)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x6198)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!440 () Int
  3)
(define-fun clrq2.spec.recv_idx () Int
  22)
(define-fun clrq2.spec.send_idx () Int
  27)
(define-fun head.rep.value () (_ BitVec 16)
  #x2b55)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!453 () Int
  6)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x2b55)
(define-fun k!447 () Int
  4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x2b55)
(define-fun k!460 () Int
  7)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x2b55)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!462 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 22) (= x!1 msg!val!0)) true
    false))
(define-fun val!463 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x11b2
    #x2b55))
(define-fun k!459 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!463 (k!459 x!0)))
(define-fun k!461 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
    7)))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!462 (k!461 x!0) (k!459 x!1)))
(define-fun tx ((x!0 msg)) Int
  35)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!16 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!17 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!18 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!19 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!21 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!22 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!24 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!25 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!26 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!27 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 23))
(assert (= clrq2.spec.send_idx 27))
(assert (= head.rep.value #x3d07))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x9b33)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x62c2)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!473 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  23)
(define-fun clrq2.spec.send_idx () Int
  27)
(define-fun head.rep.value () (_ BitVec 16)
  #x3d07)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!467 () Int
  4)
(define-fun k!480 () Int
  8)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x3d07)
(define-fun k!460 () Int
  3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x3d07)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x3d07)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!479 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq2.spec.sent!482 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 23) (= x!1 msg!val!0)) true
    false))
(define-fun k!481 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 23) 23
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
    8)))))))))))))))))))))))))))
(define-fun val!483 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x2650
    #x3d07))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!483 (k!479 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!482 (k!481 x!0) (k!479 x!1)))
(define-fun tx ((x!0 msg)) Int
  36)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 13))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!8 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!10 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!11 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!12 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!13 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!14 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!15 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 15))
(assert (= head.rep.value #x6357))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x5320)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x34e2)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!282 () Int
  8)
(define-fun head.rep.value () (_ BitVec 16)
  #x6357)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  13)
(define-fun |alit:3| () Bool
  false)
(define-fun k!262 () Int
  3)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x6357)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x6357)
(define-fun clrq1.spec.send_idx () Int
  15)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!275 () Int
  7)
(define-fun k!269 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x6357)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq1.spec.sent!284 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 13) (= x!1 msg!val!0)) true
    false))
(define-fun k!281 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!283 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 13) 13
  (ite (= x!0 4) 4
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
    8)))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!284 (k!283 x!0) (k!281 x!1)))
(define-fun val!285 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x971b
    #x6357))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!285 (k!281 x!0)))
(define-fun tx ((x!0 msg)) Int
  39)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 39)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 39)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xca53)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!843 () Int
  37)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!897 ((x!0 Int)) Bool
  (ite (= x!0 37) false
    true))
(define-fun k!896 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    37)))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!897 (k!896 x!0)))
(define-fun k!895 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!898 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 3) #x4c06
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 15) #x1cec
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 9) #x69e0
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 28) #xea9c
  (ite (= x!0 27) #x5015
  (ite (= x!0 39) #x6357
  (ite (= x!0 36) #x3d07
  (ite (= x!0 17) #x57c3
  (ite (= x!0 7) #xd247
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 32) #x2fae
  (ite (= x!0 4) #x1014
  (ite (= x!0 35) #x2b55
  (ite (= x!0 10) #x2808
  (ite (= x!0 14) #x3590
  (ite (= x!0 33) #x31ad
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 26) #xa07d
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
  (ite (= x!0 13) #x365a
  (ite (= x!0 5) #x72ac
  (ite (= x!0 8) #x1d23
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 6) #x7160
  (ite (= x!0 30) #xf388
  (ite (= x!0 19) #x23f6
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 16) #x814c
  (ite (= x!0 25) #xfa5c
    #x0000))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!898 (k!895 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 39)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 39)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xe424)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun k!902 () Int
  37)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!956 ((x!0 Int)) Bool
  (ite (= x!0 37) false
    true))
(define-fun k!955 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    37)))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!956 (k!955 x!0)))
(define-fun ref.txres!957 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 17) #x57c3
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 15) #x1cec
  (ite (= x!0 28) #xea9c
  (ite (= x!0 30) #xf388
  (ite (= x!0 9) #x69e0
  (ite (= x!0 13) #x365a
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 39) #x6357
  (ite (= x!0 3) #x4c06
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 36) #x3d07
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 5) #x72ac
  (ite (= x!0 7) #xd247
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 35) #x2b55
  (ite (= x!0 4) #x1014
  (ite (= x!0 6) #x7160
  (ite (= x!0 27) #x5015
  (ite (= x!0 10) #x2808
  (ite (= x!0 26) #xa07d
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 33) #x31ad
  (ite (= x!0 32) #x2fae
  (ite (= x!0 8) #x1d23
  (ite (= x!0 14) #x3590
  (ite (= x!0 22) #x5510
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
  (ite (= x!0 19) #x23f6
  (ite (= x!0 20) #x5005
  (ite (= x!0 16) #x814c
    #x0000))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!954 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!957 (k!954 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!16 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!17 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!18 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!19 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!21 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!22 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!24 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!25 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!26 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!27 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 24))
(assert (= clrq2.spec.send_idx 27))
(assert (= head.rep.value #xfa72))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xe1ac)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x196a)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  24)
(define-fun clrq2.spec.send_idx () Int
  27)
(define-fun head.rep.value () (_ BitVec 16)
  #xfa72)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!480 () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xfa72)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xfa72)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!487 () Int
  4)
(define-fun k!493 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xfa72)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!500 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!503 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xb29f
    #xfa72))
(define-fun k!499 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!503 (k!499 x!0)))
(define-fun clrq2.spec.sent!502 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 24) (= x!1 msg!val!0)) true
    false))
(define-fun k!501 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 24) 24
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
    7)))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!502 (k!501 x!0) (k!499 x!1)))
(define-fun tx ((x!0 msg)) Int
  37)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 14))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!8 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!10 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!11 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!12 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!13 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!14 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!15 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 15))
(assert (= head.rep.value #xad11))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x4626)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x8d0d)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!282 () Int
  3)
(define-fun head.rep.value () (_ BitVec 16)
  #xad11)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!289 () Int
  4)
(define-fun clrq1.spec.recv_idx () Int
  14)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xad11)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xad11)
(define-fun clrq1.spec.send_idx () Int
  15)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!302 () Int
  10)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xad11)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!295 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!303 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
    10)))))))))))))))
(define-fun k!301 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!304 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 14) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!304 (k!303 x!0) (k!301 x!1)))
(define-fun val!305 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x3d0d
    #xad11))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!305 (k!301 x!0)))
(define-fun tx ((x!0 msg)) Int
  40)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xfac0)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xfac0)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x91f6)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!961 () Int
  38)
(define-fun |alit:0| () Bool
  false)
(define-fun k!1014 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    38)))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed!1015 ((x!0 Int)) Bool
  (ite (= x!0 38) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1015 (k!1014 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!1016 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 15) #x1cec
  (ite (= x!0 7) #xd247
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 9) #x69e0
  (ite (= x!0 28) #xea9c
  (ite (= x!0 4) #x1014
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 35) #x2b55
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 30) #xf388
  (ite (= x!0 36) #x3d07
  (ite (= x!0 27) #x5015
  (ite (= x!0 26) #xa07d
  (ite (= x!0 13) #x365a
  (ite (= x!0 40) #xad11
  (ite (= x!0 3) #x4c06
  (ite (= x!0 6) #x7160
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 39) #x6357
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 32) #x2fae
  (ite (= x!0 37) #xfa72
  (ite (= x!0 14) #x3590
  (ite (= x!0 19) #x23f6
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 17) #x57c3
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 33) #x31ad
  (ite (= x!0 10) #x2808
  (ite (= x!0 8) #x1d23
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 16) #x814c
  (ite (= x!0 5) #x72ac
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
    #x0000))))))))))))))))))))))))))))))))))))))))
(define-fun k!1013 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1016 (k!1013 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xfa11)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xfa11)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x4ea7)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  40)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xad11)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xad11)
(define-fun k!1020 () Int
  38)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1074 ((x!0 Int)) Bool
  (ite (= x!0 38) false
    true))
(define-fun k!1073 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    38)))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1074 (k!1073 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xad11)
(define-fun ref.txres!1075 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 17) #x57c3
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 7) #xd247
  (ite (= x!0 15) #x1cec
  (ite (= x!0 35) #x2b55
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 21) #xa908
  (ite (= x!0 3) #x4c06
  (ite (= x!0 14) #x3590
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 4) #x1014
  (ite (= x!0 37) #xfa72
  (ite (= x!0 10) #x2808
  (ite (= x!0 23) #xf41c
  (ite (= x!0 27) #x5015
  (ite (= x!0 28) #xea9c
  (ite (= x!0 9) #x69e0
  (ite (= x!0 8) #x1d23
  (ite (= x!0 36) #x3d07
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 26) #xa07d
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 39) #x6357
  (ite (= x!0 16) #x814c
  (ite (= x!0 33) #x31ad
  (ite (= x!0 0) #x0000
  (ite (= x!0 5) #x72ac
  (ite (= x!0 6) #x7160
  (ite (= x!0 19) #x23f6
  (ite (= x!0 32) #x2fae
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 30) #xf388
  (ite (= x!0 13) #x365a
    #xad11))))))))))))))))))))))))))))))))))))))))
(define-fun k!1072 ((x!0 Int)) Int
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1075 (k!1072 x!0)))
(define-fun tx ((x!0 msg)) Int
  40)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 15))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!9 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!10 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!11 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!12 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!13 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!14 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!15 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!16 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!17 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 17))
(assert (= head.rep.value #xea1e))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xa487)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x5b56)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #xea1e)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  15)
(define-fun |alit:3| () Bool
  false)
(define-fun k!309 () Int
  4)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xea1e)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xea1e)
(define-fun clrq1.spec.send_idx () Int
  17)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!302 () Int
  3)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xea1e)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!315 () Int
  7)
(define-fun k!322 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!321 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!324 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 15) (= x!1 msg!val!0)) true
    false))
(define-fun k!323 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 1) 1
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 4) 4
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 16) 16
  (ite (= x!0 10) 10
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
    8)))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!324 (k!323 x!0) (k!321 x!1)))
(define-fun val!325 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xfac0
    #xea1e))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!325 (k!321 x!0)))
(define-fun tx ((x!0 msg)) Int
  42)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xde98)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xde98)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           (= X__0 42)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           (= X__0 42)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xb59c)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  42)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xea1e)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xea1e)
(define-fun k!1079 () Int
  38)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1133 ((x!0 Int)) Bool
  (ite (= x!0 38) false
    true))
(define-fun k!1132 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    38))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1133 (k!1132 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xea1e)
(define-fun k!1131 ((x!0 Int)) Int
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15)))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres!1134 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 3) #x4c06
  (ite (= x!0 20) #x5005
  (ite (= x!0 7) #xd247
  (ite (= x!0 4) #x1014
  (ite (= x!0 10) #x2808
  (ite (= x!0 6) #x7160
  (ite (= x!0 19) #x23f6
  (ite (= x!0 8) #x1d23
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 36) #x3d07
  (ite (= x!0 17) #x57c3
  (ite (= x!0 15) #x1cec
  (ite (= x!0 30) #xf388
  (ite (= x!0 39) #x6357
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 14) #x3590
  (ite (= x!0 40) #xad11
  (ite (= x!0 5) #x72ac
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 0) #x0000
  (ite (= x!0 37) #xfa72
  (ite (= x!0 35) #x2b55
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 33) #x31ad
  (ite (= x!0 32) #x2fae
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 27) #x5015
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 16) #x814c
  (ite (= x!0 22) #x5510
  (ite (= x!0 26) #xa07d
  (ite (= x!0 23) #xf41c
  (ite (= x!0 21) #xa908
  (ite (= x!0 28) #xea9c
  (ite (= x!0 13) #x365a
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 9) #x69e0
    #xea1e)))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1134 (k!1131 x!0)))
(define-fun tx ((x!0 msg)) Int
  42)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           (= X__0 42)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 39)
           (= X__0 40)
           (= X__0 42)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x8fd8)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  42)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xea1e)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xea1e)
(define-fun k!1138 () Int
  38)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1192 ((x!0 Int)) Bool
  (ite (= x!0 38) false
    true))
(define-fun k!1191 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    38))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1192 (k!1191 x!0)))
(define-fun ref.txres!1193 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 26) #xa07d
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 9) #x69e0
  (ite (= x!0 35) #x2b55
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 5) #x72ac
  (ite (= x!0 21) #xa908
  (ite (= x!0 28) #xea9c
  (ite (= x!0 17) #x57c3
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 22) #x5510
  (ite (= x!0 40) #xad11
  (ite (= x!0 39) #x6357
  (ite (= x!0 37) #xfa72
  (ite (= x!0 14) #x3590
  (ite (= x!0 3) #x4c06
  (ite (= x!0 4) #x1014
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 32) #x2fae
  (ite (= x!0 20) #x5005
  (ite (= x!0 19) #x23f6
  (ite (= x!0 33) #x31ad
  (ite (= x!0 8) #x1d23
  (ite (= x!0 7) #xd247
  (ite (= x!0 30) #xf388
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 15) #x1cec
  (ite (= x!0 36) #x3d07
  (ite (= x!0 0) #x0000
  (ite (= x!0 6) #x7160
  (ite (= x!0 16) #x814c
  (ite (= x!0 27) #x5015
  (ite (= x!0 23) #xf41c
  (ite (= x!0 13) #x365a
  (ite (= x!0 10) #x2808
    #xea1e)))))))))))))))))))))))))))))))))))))))))
(define-fun k!1190 ((x!0 Int)) Int
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15)))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xea1e)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1193 (k!1190 x!0)))
(define-fun tx ((x!0 msg)) Int
  42)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x6dfd)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x6dfd)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x655a)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x655a)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!16 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!18 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!19 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!20 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!21 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!22 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!23 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!24 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!25 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!26 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!27 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!28 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!29 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 25))
(assert (= clrq2.spec.send_idx 29))
(assert (= head.rep.value #xe4de))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x09e2)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x8ffb)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  25)
(define-fun clrq2.spec.send_idx () Int
  29)
(define-fun head.rep.value () (_ BitVec 16)
  #xe4de)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun k!520 () Int
  8)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xe4de)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xe4de)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!513 () Int
  6)
(define-fun k!507 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xe4de)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!500 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!519 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!521 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
    8)))))))))))))))))))))))))))))
(define-fun val!523 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x38de
    #xe4de))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!523 (k!519 x!0)))
(define-fun clrq2.spec.sent!522 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 25) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!522 (k!521 x!0) (k!519 x!1)))
(define-fun tx ((x!0 msg)) Int
  38)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x3132)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x3132)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 42)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 42)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xe6ce)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  42)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xea1e)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xea1e)
(define-fun k!1197 () Int
  41)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1251 ((x!0 Int)) Bool
  (ite (= x!0 41) false
    true))
(define-fun k!1250 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 35) 35
  (ite (= x!0 9) 9
    41)))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1251 (k!1250 x!0)))
(define-fun k!1249 ((x!0 Int)) Int
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xea1e)
(define-fun ref.txres!1252 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 14) #x3590
  (ite (= x!0 3) #x4c06
  (ite (= x!0 6) #x7160
  (ite (= x!0 27) #x5015
  (ite (= x!0 28) #xea9c
  (ite (= x!0 9) #x69e0
  (ite (= x!0 21) #xa908
  (ite (= x!0 26) #xa07d
  (ite (= x!0 35) #x2b55
  (ite (= x!0 5) #x72ac
  (ite (= x!0 16) #x814c
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 4) #x1014
  (ite (= x!0 8) #x1d23
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 17) #x57c3
  (ite (= x!0 15) #x1cec
  (ite (= x!0 7) #xd247
  (ite (= x!0 0) #x0000
  (ite (= x!0 23) #xf41c
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 10) #x2808
  (ite (= x!0 19) #x23f6
  (ite (= x!0 22) #x5510
  (ite (= x!0 36) #x3d07
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 40) #xad11
  (ite (= x!0 32) #x2fae
  (ite (= x!0 39) #x6357
  (ite (= x!0 37) #xfa72
  (ite (= x!0 38) #xe4de
  (ite (= x!0 20) #x5005
  (ite (= x!0 30) #xf388
  (ite (= x!0 13) #x365a
  (ite (= x!0 33) #x31ad
    #xea1e))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1252 (k!1249 x!0)))
(define-fun tx ((x!0 msg)) Int
  42)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!16 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!18 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!19 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!20 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!21 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!22 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!23 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!24 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!25 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!26 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!27 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!28 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!29 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 26))
(assert (= clrq2.spec.send_idx 29))
(assert (= head.rep.value #x1dbc))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xf64d)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x5c6b)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!527 () Int
  4)
(define-fun k!533 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  26)
(define-fun clrq2.spec.send_idx () Int
  29)
(define-fun head.rep.value () (_ BitVec 16)
  #x1dbc)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun k!520 () Int
  3)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x1dbc)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x1dbc)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!540 () Int
  7)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x1dbc)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!543 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x2ee3
    #x1dbc))
(define-fun clrq2.spec.sent!542 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 26) (= x!1 msg!val!0)) true
    false))
(define-fun k!539 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!543 (k!539 x!0)))
(define-fun k!541 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 26) 26
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
    7)))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!542 (k!541 x!0) (k!539 x!1)))
(define-fun tx ((x!0 msg)) Int
  41)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x56d7)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1256 () Int
  43)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1310 ((x!0 Int)) Bool
  (ite (= x!0 43) false
    true))
(define-fun k!1309 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 1) 1
  (ite (= x!0 32) 32
  (ite (= x!0 0) 0
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 3) 3
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 35) 35
  (ite (= x!0 9) 9
    43))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1310 (k!1309 x!0)))
(define-fun k!1308 ((x!0 Int)) Int
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 7) 7
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 1) 1
  (ite (= x!0 32) 32
  (ite (= x!0 0) 0
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15)))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres!1311 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 42) #xea1e
  (ite (= x!0 36) #x3d07
  (ite (= x!0 15) #x1cec
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 9) #x69e0
  (ite (= x!0 40) #xad11
  (ite (= x!0 28) #xea9c
  (ite (= x!0 21) #xa908
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 10) #x2808
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 37) #xfa72
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 30) #xf388
  (ite (= x!0 6) #x7160
  (ite (= x!0 19) #x23f6
  (ite (= x!0 27) #x5015
  (ite (= x!0 26) #xa07d
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 38) #xe4de
  (ite (= x!0 35) #x2b55
  (ite (= x!0 3) #x4c06
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 17) #x57c3
  (ite (= x!0 7) #xd247
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 39) #x6357
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 33) #x31ad
  (ite (= x!0 32) #x2fae
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 14) #x3590
  (ite (= x!0 4) #x1014
  (ite (= x!0 5) #x72ac
  (ite (= x!0 16) #x814c
  (ite (= x!0 8) #x1d23
  (ite (= x!0 13) #x365a
  (ite (= x!0 23) #xf41c
    #x0000)))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1311 (k!1308 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!2 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!3 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!4 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!5 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!6 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!7 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!8 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!9 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!10 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!11 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!12 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!13 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!14 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!15 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!16 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!18 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!19 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!20 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!21 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!22 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!23 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!24 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!25 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!26 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!27 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!28 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!29 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 27))
(assert (= clrq2.spec.send_idx 29))
(assert (= head.rep.value #x4c9f))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xaf4a)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xe0d1)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!547 () Int
  4)
(define-fun k!553 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  27)
(define-fun clrq2.spec.send_idx () Int
  29)
(define-fun head.rep.value () (_ BitVec 16)
  #x4c9f)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!560 () Int
  8)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x4c9f)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x4c9f)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!540 () Int
  3)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x4c9f)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!562 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 27) (= x!1 msg!val!0)) true
    false))
(define-fun k!559 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!561 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 27) 27
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
    8)))))))))))))))))))))))))))))
(define-fun val!563 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x6dfd
    #x4c9f))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!563 (k!559 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!562 (k!561 x!0) (k!559 x!1)))
(define-fun tx ((x!0 msg)) Int
  45)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x565b)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x565b)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x8bdb)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x8bdb)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 45)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 45)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xcb3d)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1315 () Int
  43)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1369 ((x!0 Int)) Bool
  (ite (= x!0 43) false
    true))
(define-fun k!1368 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 1) 1
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 0) 0
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 35) 35
  (ite (= x!0 9) 9
    43)))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1369 (k!1368 x!0)))
(define-fun k!1367 ((x!0 Int)) Int
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 1) 1
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 0) 0
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres!1370 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 42) #xea1e
  (ite (= x!0 36) #x3d07
  (ite (= x!0 15) #x1cec
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 9) #x69e0
  (ite (= x!0 28) #xea9c
  (ite (= x!0 21) #xa908
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 14) #x3590
  (ite (= x!0 40) #xad11
  (ite (= x!0 39) #x6357
  (ite (= x!0 38) #xe4de
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 6) #x7160
  (ite (= x!0 4) #x1014
  (ite (= x!0 37) #xfa72
  (ite (= x!0 30) #xf388
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 19) #x23f6
  (ite (= x!0 10) #x2808
  (ite (= x!0 3) #x4c06
  (ite (= x!0 5) #x72ac
  (ite (= x!0 32) #x2fae
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 7) #xd247
  (ite (= x!0 35) #x2b55
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 17) #x57c3
  (ite (= x!0 8) #x1d23
  (ite (= x!0 33) #x31ad
  (ite (= x!0 22) #x5510
  (ite (= x!0 20) #x5005
  (ite (= x!0 16) #x814c
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 27) #x5015
  (ite (= x!0 26) #xa07d
  (ite (= x!0 13) #x365a
  (ite (= x!0 23) #xf41c
  (ite (= x!0 11) #x7fa3
    #x0000))))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1370 (k!1367 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x7ed4)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x7ed4)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!3 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!4 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!5 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!6 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!7 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!8 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!9 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!10 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!11 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!12 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!13 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!14 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!15 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!16 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!17 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!18 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!19 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!20 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!21 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!22 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!23 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!24 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!25 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!26 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!27 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!28 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!29 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!30 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 28))
(assert (= clrq2.spec.send_idx 30))
(assert (= head.rep.value #xba9c))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x0624)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x80c8)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!567 () Int
  4)
(define-fun k!580 () Int
  7)
(define-fun clrq2.spec.recv_idx () Int
  28)
(define-fun clrq2.spec.send_idx () Int
  30)
(define-fun head.rep.value () (_ BitVec 16)
  #xba9c)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!560 () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xba9c)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xba9c)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xba9c)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!573 () Int
  6)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq2.spec.sent!582 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 28) (= x!1 msg!val!0)) true
    false))
(define-fun val!583 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x655a
    #xba9c))
(define-fun k!579 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!583 (k!579 x!0)))
(define-fun k!581 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 28) 28
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
    7))))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!582 (k!581 x!0) (k!579 x!1)))
(define-fun tx ((x!0 msg)) Int
  46)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!3 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!4 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!5 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!6 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!7 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!8 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!9 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!10 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!11 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!12 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!13 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!14 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!15 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!16 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!17 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!18 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!19 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!20 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!21 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!22 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!23 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!24 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!25 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!26 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!27 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!28 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!29 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!30 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 29))
(assert (= clrq2.spec.send_idx 30))
(assert (= head.rep.value #x1ff6))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x0361)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x9756)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!587 () Int
  4)
(define-fun k!580 () Int
  3)
(define-fun clrq2.spec.recv_idx () Int
  29)
(define-fun clrq2.spec.send_idx () Int
  30)
(define-fun head.rep.value () (_ BitVec 16)
  #x1ff6)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x1ff6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x1ff6)
(define-fun k!593 () Int
  6)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!600 () Int
  8)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x1ff6)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!599 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!601 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 29) 29
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
    8))))))))))))))))))))))))))))))
(define-fun val!603 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x8bdb
    #x1ff6))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!603 (k!599 x!0)))
(define-fun clrq2.spec.sent!602 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 29) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!602 (k!601 x!0) (k!599 x!1)))
(define-fun tx ((x!0 msg)) Int
  49)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 16))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!9 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!10 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!12 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!13 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!15 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!17 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!18 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!19 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!20 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!21 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) true))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 21))
(assert (= head.rep.value #xabd1))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x024d)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xe9a8)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!329 () Int
  4)
(define-fun k!335 () Int
  7)
(define-fun head.rep.value () (_ BitVec 16)
  #xabd1)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  16)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xabd1)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xabd1)
(define-fun clrq1.spec.send_idx () Int
  21)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!342 () Int
  10)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xabd1)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!322 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!343 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 16) 16
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 19) 19
  (ite (= x!0 8) 8
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 20) 20
  (ite (= x!0 11) 11
    10)))))))))))))))))))))
(define-fun k!341 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!344 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 16) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!344 (k!343 x!0) (k!341 x!1)))
(define-fun val!345 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xfa11
    #xabd1))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!345 (k!341 x!0)))
(define-fun tx ((x!0 msg)) Int
  43)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 17))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!9 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!10 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!12 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!13 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!15 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!17 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!18 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!19 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!20 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!21 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 21))
(assert (= head.rep.value #xa5e2))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6a55)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x263b)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!349 () Int
  4)
(define-fun head.rep.value () (_ BitVec 16)
  #xa5e2)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!355 () Int
  7)
(define-fun clrq1.spec.recv_idx () Int
  17)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xa5e2)
(define-fun k!362 () Int
  8)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xa5e2)
(define-fun clrq1.spec.send_idx () Int
  21)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!342 () Int
  3)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xa5e2)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!361 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!364 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 17) (= x!1 msg!val!0)) true
    false))
(define-fun k!363 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 19) 19
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 16) 16
  (ite (= x!0 10) 10
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 20) 20
  (ite (= x!0 11) 11
    8)))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!364 (k!363 x!0) (k!361 x!1)))
(define-fun val!365 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xde98
    #xa5e2))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!365 (k!361 x!0)))
(define-fun tx ((x!0 msg)) Int
  44)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 18))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!9 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!10 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!12 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!13 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!14 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!15 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!16 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!17 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!18 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!19 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!20 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!21 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 21))
(assert (= head.rep.value #x847a))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6749)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x42e2)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!369 () Int
  4)
(define-fun head.rep.value () (_ BitVec 16)
  #x847a)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  18)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x847a)
(define-fun k!362 () Int
  3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x847a)
(define-fun clrq1.spec.send_idx () Int
  21)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x847a)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!382 () Int
  10)
(define-fun k!375 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!383 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 19) 19
  (ite (= x!0 8) 8
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 16) 16
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 20) 20
  (ite (= x!0 11) 11
    10)))))))))))))))))))))
(define-fun clrq1.spec.sent!384 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 18) (= x!1 msg!val!0)) true
    false))
(define-fun k!381 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!384 (k!383 x!0) (k!381 x!1)))
(define-fun val!385 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x3132
    #x847a))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!385 (k!381 x!0)))
(define-fun tx ((x!0 msg)) Int
  47)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x5211)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x5211)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x3bb9)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x3bb9)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 43) (= (ref.txres X__0) #xabd1))
       (=> (= X__0 44) (= (ref.txres X__0) #xa5e2))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (=> (= X__0 46) (= (ref.txres X__0) #xba9c))
       (=> (= X__0 47) (= (ref.txres X__0) #x847a))
       (=> (= X__0 49) (= (ref.txres X__0) #x1ff6))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 49)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 43) (= (ref.committed X__0) true))
       (=> (= X__0 44) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (=> (= X__0 46) (= (ref.committed X__0) true))
       (=> (= X__0 47) (= (ref.committed X__0) true))
       (=> (= X__0 49) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 49)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xd018)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1374 () Int
  48)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1434 ((x!0 Int)) Bool
  (ite (= x!0 48) false
    true))
(define-fun k!1433 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 9) 9
  (ite (= x!0 38) 38
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 35) 35
    48))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1434 (k!1433 x!0)))
(define-fun ref.txres!1435 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 15) #x1cec
  (ite (= x!0 42) #xea1e
  (ite (= x!0 4) #x1014
  (ite (= x!0 33) #x31ad
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 36) #x3d07
  (ite (= x!0 17) #x57c3
  (ite (= x!0 49) #x1ff6
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 47) #x847a
  (ite (= x!0 46) #xba9c
  (ite (= x!0 44) #xa5e2
  (ite (= x!0 39) #x6357
  (ite (= x!0 43) #xabd1
  (ite (= x!0 7) #xd247
  (ite (= x!0 40) #xad11
  (ite (= x!0 38) #xe4de
  (ite (= x!0 35) #x2b55
  (ite (= x!0 6) #x7160
  (ite (= x!0 20) #x5005
  (ite (= x!0 5) #x72ac
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 30) #xf388
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 27) #x5015
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 8) #x1d23
  (ite (= x!0 13) #x365a
  (ite (= x!0 26) #xa07d
  (ite (= x!0 16) #x814c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 28) #xea9c
  (ite (= x!0 3) #x4c06
  (ite (= x!0 21) #xa908
  (ite (= x!0 10) #x2808
  (ite (= x!0 19) #x23f6
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 22) #x5510
  (ite (= x!0 37) #xfa72
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 9) #x69e0
  (ite (= x!0 14) #x3590
  (ite (= x!0 32) #x2fae
    #x0000)))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!1432 ((x!0 Int)) Int
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15)))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1435 (k!1432 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xb1fd)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xb1fd)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 43) (= (ref.txres X__0) #xabd1))
       (=> (= X__0 44) (= (ref.txres X__0) #xa5e2))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (=> (= X__0 46) (= (ref.txres X__0) #xba9c))
       (=> (= X__0 47) (= (ref.txres X__0) #x847a))
       (=> (= X__0 49) (= (ref.txres X__0) #x1ff6))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 49)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 43) (= (ref.committed X__0) true))
       (=> (= X__0 44) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (=> (= X__0 46) (= (ref.committed X__0) true))
       (=> (= X__0 47) (= (ref.committed X__0) true))
       (=> (= X__0 49) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 49)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x66fe)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  49)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x1ff6)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x1ff6)
(define-fun k!1439 () Int
  48)
(define-fun |alit:0| () Bool
  false)
(define-fun k!1498 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 49) 49
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 9) 9
  (ite (= x!0 38) 38
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 35) 35
    48))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed!1499 ((x!0 Int)) Bool
  (ite (= x!0 48) false
    true))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1499 (k!1498 x!0)))
(define-fun k!1497 ((x!0 Int)) Int
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 49) 49
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15)))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres!1500 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 0) #x0000
  (ite (= x!0 7) #xd247
  (ite (= x!0 33) #x31ad
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 6) #x7160
  (ite (= x!0 37) #xfa72
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 44) #xa5e2
  (ite (= x!0 15) #x1cec
  (ite (= x!0 21) #xa908
  (ite (= x!0 36) #x3d07
  (ite (= x!0 8) #x1d23
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 22) #x5510
  (ite (= x!0 39) #x6357
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 27) #x5015
  (ite (= x!0 16) #x814c
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 3) #x4c06
  (ite (= x!0 20) #x5005
  (ite (= x!0 4) #x1014
  (ite (= x!0 47) #x847a
  (ite (= x!0 17) #x57c3
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 35) #x2b55
  (ite (= x!0 43) #xabd1
  (ite (= x!0 40) #xad11
  (ite (= x!0 5) #x72ac
  (ite (= x!0 42) #xea1e
  (ite (= x!0 32) #x2fae
  (ite (= x!0 26) #xa07d
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 28) #xea9c
  (ite (= x!0 23) #xf41c
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 19) #x23f6
  (ite (= x!0 30) #xf388
  (ite (= x!0 46) #xba9c
  (ite (= x!0 13) #x365a
  (ite (= x!0 14) #x3590
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 10) #x2808
  (ite (= x!0 9) #x69e0
  (ite (= x!0 38) #xe4de
    #x1ff6)))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x1ff6)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1500 (k!1497 x!0)))
(define-fun tx ((x!0 msg)) Int
  49)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x1a5c)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x1a5c)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 19))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!9 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!10 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!12 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!13 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!14 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!15 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!16 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!17 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!18 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!19 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!20 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!21 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!22 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 22))
(assert (= head.rep.value #xb5ac))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6c6d)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x9246)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #xb5ac)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  19)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xb5ac)
(define-fun k!395 () Int
  7)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xb5ac)
(define-fun clrq1.spec.send_idx () Int
  22)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!402 () Int
  8)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xb5ac)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!382 () Int
  3)
(define-fun k!389 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq1.spec.sent!404 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 19) (= x!1 msg!val!0)) true
    false))
(define-fun k!401 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!403 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 19) 19
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 16) 16
  (ite (= x!0 10) 10
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 20) 20
  (ite (= x!0 21) 21
  (ite (= x!0 11) 11
    8))))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!404 (k!403 x!0) (k!401 x!1)))
(define-fun val!405 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x565b
    #xb5ac))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!405 (k!401 x!0)))
(define-fun tx ((x!0 msg)) Int
  48)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xa6a4)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xa6a4)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 20))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!9 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!10 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!12 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!13 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!14 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!15 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!16 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!17 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!18 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!19 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!20 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!21 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!22 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 22))
(assert (= head.rep.value #x0c07))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x76ee)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xac7f)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x0c07)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  20)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x0c07)
(define-fun k!409 () Int
  4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x0c07)
(define-fun clrq1.spec.send_idx () Int
  22)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!402 () Int
  3)
(define-fun k!422 () Int
  10)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x0c07)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!415 () Int
  7)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!423 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 20) 20
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 19) 19
  (ite (= x!0 8) 8
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 16) 16
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 11) 11
    10))))))))))))))))))))))
(define-fun k!421 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!424 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 20) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!424 (k!423 x!0) (k!421 x!1)))
(define-fun val!425 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x7ed4
    #x0c07))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!425 (k!421 x!0)))
(define-fun tx ((x!0 msg)) Int
  50)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 21))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!3 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!4 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!5 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!6 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!7 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!8 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!9 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!10 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!11 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!12 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!13 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!14 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!15 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!16 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!17 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!18 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!19 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!20 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!21 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!22 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 22))
(assert (= head.rep.value #x8adb))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xd6b6)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xc41b)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!435 () Int
  7)
(define-fun head.rep.value () (_ BitVec 16)
  #x8adb)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!442 () Int
  8)
(define-fun clrq1.spec.recv_idx () Int
  21)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x8adb)
(define-fun k!422 () Int
  3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x8adb)
(define-fun clrq1.spec.send_idx () Int
  22)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!429 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x8adb)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!441 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!444 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 21) (= x!1 msg!val!0)) true
    false))
(define-fun k!443 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 21) 21
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 19) 19
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 16) 16
  (ite (= x!0 10) 10
  (ite (= x!0 0) 0
  (ite (= x!0 6) 6
  (ite (= x!0 9) 9
  (ite (= x!0 20) 20
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
    8))))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!444 (k!443 x!0) (k!441 x!1)))
(define-fun val!445 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x1a5c
    #x8adb))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!445 (k!441 x!0)))
(define-fun tx ((x!0 msg)) Int
  54)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 54) (= (ref.txres X__0) #x8adb))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 43) (= (ref.txres X__0) #xabd1))
       (=> (= X__0 44) (= (ref.txres X__0) #xa5e2))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (=> (= X__0 46) (= (ref.txres X__0) #xba9c))
       (=> (= X__0 47) (= (ref.txres X__0) #x847a))
       (=> (= X__0 48) (= (ref.txres X__0) #xb5ac))
       (=> (= X__0 49) (= (ref.txres X__0) #x1ff6))
       (=> (= X__0 50) (= (ref.txres X__0) #x0c07))
       (or false
           (= X__0 0)
           (= X__0 54)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 54) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 43) (= (ref.committed X__0) true))
       (=> (= X__0 44) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (=> (= X__0 46) (= (ref.committed X__0) true))
       (=> (= X__0 47) (= (ref.committed X__0) true))
       (=> (= X__0 48) (= (ref.committed X__0) true))
       (=> (= X__0 49) (= (ref.committed X__0) true))
       (=> (= X__0 50) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 54)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x5c5b)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1504 () Int
  51)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1564 ((x!0 Int)) Bool
  (ite (= x!0 51) false
    true))
(define-fun k!1563 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 54) 54
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    51)))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1564 (k!1563 x!0)))
(define-fun ref.txres!1565 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 17) #x57c3
  (ite (= x!0 42) #xea1e
  (ite (= x!0 33) #x31ad
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 28) #xea9c
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 15) #x1cec
  (ite (= x!0 36) #x3d07
  (ite (= x!0 48) #xb5ac
  (ite (= x!0 49) #x1ff6
  (ite (= x!0 43) #xabd1
  (ite (= x!0 40) #xad11
  (ite (= x!0 38) #xe4de
  (ite (= x!0 27) #x5015
  (ite (= x!0 50) #x0c07
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 5) #x72ac
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 3) #x4c06
  (ite (= x!0 6) #x7160
  (ite (= x!0 44) #xa5e2
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 46) #xba9c
  (ite (= x!0 4) #x1014
  (ite (= x!0 39) #x6357
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 22) #x5510
  (ite (= x!0 32) #x2fae
  (ite (= x!0 21) #xa908
  (ite (= x!0 14) #x3590
  (ite (= x!0 10) #x2808
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 9) #x69e0
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 23) #xf41c
  (ite (= x!0 54) #x8adb
  (ite (= x!0 13) #x365a
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 8) #x1d23
  (ite (= x!0 47) #x847a
  (ite (= x!0 7) #xd247
  (ite (= x!0 26) #xa07d
  (ite (= x!0 37) #xfa72
  (ite (= x!0 35) #x2b55
  (ite (= x!0 16) #x814c
  (ite (= x!0 19) #x23f6
  (ite (= x!0 20) #x5005
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 30) #xf388
    #x0000))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!1562 ((x!0 Int)) Int
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 54) 54
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1565 (k!1562 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xc7a8)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xc7a8)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!12 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!13 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!14 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!15 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!16 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!17 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!18 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!19 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!20 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!21 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!22 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!23 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!24 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!25 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!26 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!27 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!28 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!29 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!30 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!31 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!32 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!33 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!34 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!35 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 30))
(assert (= clrq2.spec.send_idx 35))
(assert (= head.rep.value #xa537))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6e4d)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x6ee1)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  30)
(define-fun clrq2.spec.send_idx () Int
  35)
(define-fun head.rep.value () (_ BitVec 16)
  #xa537)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!607 () Int
  4)
(define-fun k!620 () Int
  7)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xa537)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xa537)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!600 () Int
  3)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xa537)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!613 () Int
  6)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!623 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x5211
    #xa537))
(define-fun k!619 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!623 (k!619 x!0)))
(define-fun clrq2.spec.sent!622 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 30) (= x!1 msg!val!0)) true
    false))
(define-fun k!621 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 30) 30
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
    7)))))))))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!622 (k!621 x!0) (k!619 x!1)))
(define-fun tx ((x!0 msg)) Int
  51)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x21ca)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x21ca)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xdfe8)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xdfe8)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 22))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!6 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!7 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!8 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!9 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!10 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!11 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!12 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!13 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!14 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!15 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!16 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!17 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!18 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!19 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!20 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!21 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!22 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!23 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 23))
(assert (= head.rep.value #xf748))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xa791)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x5ed6)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!449 () Int
  4)
(define-fun k!455 () Int
  7)
(define-fun k!462 () Int
  10)
(define-fun head.rep.value () (_ BitVec 16)
  #xf748)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!442 () Int
  3)
(define-fun clrq1.spec.recv_idx () Int
  22)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xf748)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xf748)
(define-fun clrq1.spec.send_idx () Int
  23)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xf748)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!463 ((x!0 Int)) Int
  (ite (= x!0 5) 5
  (ite (= x!0 15) 15
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 22) 22
  (ite (= x!0 4) 4
  (ite (= x!0 12) 12
  (ite (= x!0 19) 19
  (ite (= x!0 8) 8
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 16) 16
  (ite (= x!0 0) 0
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 20) 20
  (ite (= x!0 21) 21
  (ite (= x!0 11) 11
  (ite (= x!0 6) 6
    10)))))))))))))))))))))))
(define-fun k!461 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!464 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 22) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!464 (k!463 x!0) (k!461 x!1)))
(define-fun val!465 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xdfe8
    #xf748))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!465 (k!461 x!0)))
(define-fun tx ((x!0 msg)) Int
  58)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x1769)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x1769)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!12 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!13 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!14 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!15 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!16 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!17 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!18 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!19 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!20 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!21 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!22 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!23 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!24 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!25 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!26 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!27 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!28 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!29 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!30 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!31 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!32 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!33 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!34 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!35 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!36 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 31))
(assert (= clrq2.spec.send_idx 36))
(assert (= head.rep.value #xd730))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xe0dd)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x9fd1)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  31)
(define-fun clrq2.spec.send_idx () Int
  36)
(define-fun head.rep.value () (_ BitVec 16)
  #xd730)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!620 () Int
  3)
(define-fun k!627 () Int
  4)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xd730)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xd730)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!633 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xd730)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!640 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!639 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!641 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 23) 23
  (ite (= x!0 34) 34
  (ite (= x!0 35) 35
    8))))))))))))))))))))))))))))))))))))
(define-fun val!643 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x3bb9
    #xd730))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!643 (k!639 x!0)))
(define-fun clrq2.spec.sent!642 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 31) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!642 (k!641 x!0) (k!639 x!1)))
(define-fun tx ((x!0 msg)) Int
  52)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 43) (= (ref.txres X__0) #xabd1))
       (=> (= X__0 44) (= (ref.txres X__0) #xa5e2))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (=> (= X__0 46) (= (ref.txres X__0) #xba9c))
       (=> (= X__0 47) (= (ref.txres X__0) #x847a))
       (=> (= X__0 48) (= (ref.txres X__0) #xb5ac))
       (=> (= X__0 49) (= (ref.txres X__0) #x1ff6))
       (=> (= X__0 50) (= (ref.txres X__0) #x0c07))
       (=> (= X__0 51) (= (ref.txres X__0) #xa537))
       (=> (= X__0 52) (= (ref.txres X__0) #xd730))
       (=> (= X__0 54) (= (ref.txres X__0) #x8adb))
       (=> (= X__0 58) (= (ref.txres X__0) #xf748))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= X__0 51)
           (= X__0 52)
           (= X__0 54)
           (= X__0 58)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 43) (= (ref.committed X__0) true))
       (=> (= X__0 44) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (=> (= X__0 46) (= (ref.committed X__0) true))
       (=> (= X__0 47) (= (ref.committed X__0) true))
       (=> (= X__0 48) (= (ref.committed X__0) true))
       (=> (= X__0 49) (= (ref.committed X__0) true))
       (=> (= X__0 50) (= (ref.committed X__0) true))
       (=> (= X__0 51) (= (ref.committed X__0) true))
       (=> (= X__0 52) (= (ref.committed X__0) true))
       (=> (= X__0 54) (= (ref.committed X__0) true))
       (=> (= X__0 58) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= X__0 51)
           (= X__0 52)
           (= X__0 54)
           (= X__0 58)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xc4ae)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  false)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  58)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #xf748)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #xf748)
(define-fun k!1569 () Int
  53)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1629 ((x!0 Int)) Bool
  (ite (= x!0 53) false
    true))
(define-fun k!1628 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 51) 51
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 58) 58
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 52) 52
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 54) 54
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 38) 38
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 35) 35
    53))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1629 (k!1628 x!0)))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #xf748)
(define-fun k!1627 ((x!0 Int)) Int
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 51) 51
  (ite (= x!0 44) 44
  (ite (= x!0 25) 25
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 58) 58
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 52) 52
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 1) 1
  (ite (= x!0 2) 2
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 54) 54
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres!1630 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 0) #x0000
  (ite (= x!0 8) #x1d23
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 37) #xfa72
  (ite (= x!0 9) #x69e0
  (ite (= x!0 17) #x57c3
  (ite (= x!0 7) #xd247
  (ite (= x!0 15) #x1cec
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 10) #x2808
  (ite (= x!0 48) #xb5ac
  (ite (= x!0 47) #x847a
  (ite (= x!0 46) #xba9c
  (ite (= x!0 44) #xa5e2
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 22) #x5510
  (ite (= x!0 51) #xa537
  (ite (= x!0 36) #x3d07
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 33) #x31ad
  (ite (= x!0 54) #x8adb
  (ite (= x!0 52) #xd730
  (ite (= x!0 50) #x0c07
  (ite (= x!0 49) #x1ff6
  (ite (= x!0 43) #xabd1
  (ite (= x!0 35) #x2b55
  (ite (= x!0 40) #xad11
  (ite (= x!0 21) #xa908
  (ite (= x!0 3) #x4c06
  (ite (= x!0 30) #xf388
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 19) #x23f6
  (ite (= x!0 5) #x72ac
  (ite (= x!0 38) #xe4de
  (ite (= x!0 28) #xea9c
  (ite (= x!0 4) #x1014
  (ite (= x!0 6) #x7160
  (ite (= x!0 39) #x6357
  (ite (= x!0 26) #xa07d
  (ite (= x!0 23) #xf41c
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 27) #x5015
  (ite (= x!0 14) #x3590
  (ite (= x!0 20) #x5005
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 42) #xea1e
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 32) #x2fae
  (ite (= x!0 16) #x814c
  (ite (= x!0 13) #x365a
    #xf748)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1630 (k!1627 x!0)))
(define-fun tx ((x!0 msg)) Int
  58)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!12 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!13 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!14 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!15 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!16 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!17 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!18 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!19 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!20 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!21 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!22 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!23 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!24 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!25 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!26 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!27 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!28 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!29 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!30 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!31 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!32 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!33 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!34 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!35 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!36 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 32))
(assert (= clrq2.spec.send_idx 36))
(assert (= head.rep.value #x12e9))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x63bc)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x4a15)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  32)
(define-fun clrq2.spec.send_idx () Int
  36)
(define-fun head.rep.value () (_ BitVec 16)
  #x12e9)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!647 () Int
  4)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x12e9)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x12e9)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!653 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x12e9)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!660 () Int
  7)
(define-fun k!640 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!663 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xb1fd
    #x12e9))
(define-fun k!659 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!663 (k!659 x!0)))
(define-fun clrq2.spec.sent!662 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 32) (= x!1 msg!val!0)) true
    false))
(define-fun k!661 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 35) 35
    7))))))))))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!662 (k!661 x!0) (k!659 x!1)))
(define-fun tx ((x!0 msg)) Int
  53)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xdc65)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xdc65)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x37f3)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x37f3)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xbb22)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xbb22)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!12 (and (= X__0 36) true (= (val X__1) #xdc65) (= (tx X__1) 60)))
        (a!13 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!14 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!15 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!16 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!17 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!18 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!19 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!20 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!21 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!22 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!23 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!24 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!25 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!26 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!27 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!28 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!29 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!30 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!31 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!32 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!33 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!34 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!35 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!36 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!37 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!37 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             a!37
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 33))
(assert (= clrq2.spec.send_idx 37))
(assert (= head.rep.value #xc4e6))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x357a)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x2763)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!673 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  33)
(define-fun clrq2.spec.send_idx () Int
  37)
(define-fun head.rep.value () (_ BitVec 16)
  #xc4e6)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xc4e6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xc4e6)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xc4e6)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!680 () Int
  8)
(define-fun k!660 () Int
  3)
(define-fun k!667 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!679 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq2.spec.sent!682 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 33) (= x!1 msg!val!0)) true
    false))
(define-fun k!681 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 36) 36
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 34) 34
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 35) 35
    8)))))))))))))))))))))))))))))))))))))
(define-fun val!683 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xa6a4
    #xc4e6))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!683 (k!679 x!0)))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!682 (k!681 x!0) (k!679 x!1)))
(define-fun tx ((x!0 msg)) Int
  55)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x74c7)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x74c7)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!12 (and (= X__0 36) true (= (val X__1) #xdc65) (= (tx X__1) 60)))
        (a!13 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!14 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!15 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!16 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!17 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!18 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!19 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!20 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!21 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!22 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!23 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!24 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!25 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!26 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!27 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!28 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!29 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!30 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!31 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!32 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!33 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!34 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!35 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!36 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!37 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!37 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             a!37
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 34))
(assert (= clrq2.spec.send_idx 37))
(assert (= head.rep.value #x6b8a))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x3b87)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xe2e4)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  34)
(define-fun clrq2.spec.send_idx () Int
  37)
(define-fun head.rep.value () (_ BitVec 16)
  #x6b8a)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!700 () Int
  7)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x6b8a)
(define-fun k!693 () Int
  6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x6b8a)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!687 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x6b8a)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!680 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!703 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xc7a8
    #x6b8a))
(define-fun k!699 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!703 (k!699 x!0)))
(define-fun clrq2.spec.sent!702 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 34) (= x!1 msg!val!0)) true
    false))
(define-fun k!701 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 36) 36
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 34) 34
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 23) 23
  (ite (= x!0 11) 11
  (ite (= x!0 28) 28
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 35) 35
    7)))))))))))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!702 (k!701 x!0) (k!699 x!1)))
(define-fun tx ((x!0 msg)) Int
  56)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 43) (= (ref.txres X__0) #xabd1))
       (=> (= X__0 44) (= (ref.txres X__0) #xa5e2))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (=> (= X__0 46) (= (ref.txres X__0) #xba9c))
       (=> (= X__0 47) (= (ref.txres X__0) #x847a))
       (=> (= X__0 48) (= (ref.txres X__0) #xb5ac))
       (=> (= X__0 49) (= (ref.txres X__0) #x1ff6))
       (=> (= X__0 50) (= (ref.txres X__0) #x0c07))
       (=> (= X__0 51) (= (ref.txres X__0) #xa537))
       (=> (= X__0 52) (= (ref.txres X__0) #xd730))
       (=> (= X__0 53) (= (ref.txres X__0) #x12e9))
       (=> (= X__0 54) (= (ref.txres X__0) #x8adb))
       (=> (= X__0 55) (= (ref.txres X__0) #xc4e6))
       (=> (= X__0 56) (= (ref.txres X__0) #x6b8a))
       (=> (= X__0 58) (= (ref.txres X__0) #xf748))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= X__0 51)
           (= X__0 52)
           (= X__0 53)
           (= X__0 54)
           (= X__0 55)
           (= X__0 56)
           (= X__0 58)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 43) (= (ref.committed X__0) true))
       (=> (= X__0 44) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (=> (= X__0 46) (= (ref.committed X__0) true))
       (=> (= X__0 47) (= (ref.committed X__0) true))
       (=> (= X__0 48) (= (ref.committed X__0) true))
       (=> (= X__0 49) (= (ref.committed X__0) true))
       (=> (= X__0 50) (= (ref.committed X__0) true))
       (=> (= X__0 51) (= (ref.committed X__0) true))
       (=> (= X__0 52) (= (ref.committed X__0) true))
       (=> (= X__0 53) (= (ref.committed X__0) true))
       (=> (= X__0 54) (= (ref.committed X__0) true))
       (=> (= X__0 55) (= (ref.committed X__0) true))
       (=> (= X__0 56) (= (ref.committed X__0) true))
       (=> (= X__0 58) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= X__0 51)
           (= X__0 52)
           (= X__0 53)
           (= X__0 54)
           (= X__0 55)
           (= X__0 56)
           (= X__0 58)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #x5e01)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1634 () Int
  57)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1700 ((x!0 Int)) Bool
  (ite (= x!0 57) false
    true))
(define-fun k!1699 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 51) 51
  (ite (= x!0 44) 44
  (ite (= x!0 53) 53
  (ite (= x!0 25) 25
  (ite (= x!0 56) 56
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 58) 58
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 55) 55
  (ite (= x!0 52) 52
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 3) 3
  (ite (= x!0 54) 54
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1700 (k!1699 x!0)))
(define-fun ref.txres!1701 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 26) #xa07d
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 56) #x6b8a
  (ite (= x!0 37) #xfa72
  (ite (= x!0 4) #x1014
  (ite (= x!0 7) #xd247
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 36) #x3d07
  (ite (= x!0 15) #x1cec
  (ite (= x!0 58) #xf748
  (ite (= x!0 11) #x7fa3
  (ite (= x!0 55) #xc4e6
  (ite (= x!0 54) #x8adb
  (ite (= x!0 53) #x12e9
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 6) #x7160
  (ite (= x!0 8) #x1d23
  (ite (= x!0 22) #x5510
  (ite (= x!0 28) #xea9c
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 47) #x847a
  (ite (= x!0 48) #xb5ac
  (ite (= x!0 51) #xa537
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 17) #x57c3
  (ite (= x!0 13) #x365a
  (ite (= x!0 3) #x4c06
  (ite (= x!0 49) #x1ff6
  (ite (= x!0 43) #xabd1
  (ite (= x!0 40) #xad11
  (ite (= x!0 38) #xe4de
  (ite (= x!0 23) #xf41c
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 33) #x31ad
  (ite (= x!0 50) #x0c07
  (ite (= x!0 44) #xa5e2
  (ite (= x!0 39) #x6357
  (ite (= x!0 42) #xea1e
  (ite (= x!0 35) #x2b55
  (ite (= x!0 9) #x69e0
  (ite (= x!0 10) #x2808
  (ite (= x!0 16) #x814c
  (ite (= x!0 20) #x5005
  (ite (= x!0 32) #x2fae
  (ite (= x!0 14) #x3590
  (ite (= x!0 30) #xf388
  (ite (= x!0 21) #xa908
  (ite (= x!0 27) #x5015
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 5) #x72ac
  (ite (= x!0 19) #x23f6
  (ite (= x!0 46) #xba9c
  (ite (= x!0 52) #xd730
    #x0000))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun k!1698 ((x!0 Int)) Int
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 45) 45
  (ite (= x!0 7) 7
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 47) 47
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 51) 51
  (ite (= x!0 44) 44
  (ite (= x!0 53) 53
  (ite (= x!0 25) 25
  (ite (= x!0 56) 56
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 58) 58
  (ite (= x!0 26) 26
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 55) 55
  (ite (= x!0 52) 52
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 54) 54
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1701 (k!1698 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 23))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!6 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!7 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!8 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!9 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!10 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!11 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!12 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!13 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!14 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!15 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!16 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!17 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!18 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!19 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!20 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!21 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!22 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!23 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!24 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!25 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!26 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!27 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 27))
(assert (= head.rep.value #x3332))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x23e6)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xbf76)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!462 () Int
  3)
(define-fun k!475 () Int
  6)
(define-fun k!482 () Int
  7)
(define-fun head.rep.value () (_ BitVec 16)
  #x3332)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  23)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x3332)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x3332)
(define-fun clrq1.spec.send_idx () Int
  27)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x3332)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!469 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq1.spec.sent!484 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 23) (= x!1 msg!val!0)) true
    false))
(define-fun k!481 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!483 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 23) 23
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
    7)))))))))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!484 (k!483 x!0) (k!481 x!1)))
(define-fun val!485 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x1769
    #x3332))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!485 (k!481 x!0)))
(define-fun tx ((x!0 msg)) Int
  59)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x6730)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x6730)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 37) true (= (val X__1) #x6730) (= (tx X__1) 64)))
        (a!12 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!13 (and (= X__0 36) true (= (val X__1) #xdc65) (= (tx X__1) 60)))
        (a!14 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!15 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!16 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!17 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!18 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!19 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!20 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!21 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!22 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!23 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!24 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!25 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!26 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!27 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!28 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!29 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!30 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!31 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!32 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!33 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!34 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!35 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!36 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!37 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!38 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!37 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!38 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             a!37
             a!38
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 35))
(assert (= clrq2.spec.send_idx 38))
(assert (= head.rep.value #x4a9b))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xde99)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x4a32)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun clrq2.spec.recv_idx () Int
  35)
(define-fun clrq2.spec.send_idx () Int
  38)
(define-fun head.rep.value () (_ BitVec 16)
  #x4a9b)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!700 () Int
  3)
(define-fun k!707 () Int
  4)
(define-fun |alit:3| () Bool
  false)
(define-fun k!713 () Int
  6)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x4a9b)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x4a9b)
(define-fun k!720 () Int
  8)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x4a9b)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!719 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val!723 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x21ca
    #x4a9b))
(define-fun k!721 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 36) 36
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 35) 35
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 23) 23
  (ite (= x!0 34) 34
    8))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!723 (k!719 x!0)))
(define-fun clrq2.spec.sent!722 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 35) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!722 (k!721 x!0) (k!719 x!1)))
(define-fun tx ((x!0 msg)) Int
  57)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x98b7)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x98b7)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 37) true (= (val X__1) #x6730) (= (tx X__1) 64)))
        (a!12 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!13 (and (= X__0 36) true (= (val X__1) #xdc65) (= (tx X__1) 60)))
        (a!14 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!15 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!16 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!17 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!18 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!19 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!20 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!21 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!22 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!23 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!24 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!25 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!26 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!27 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!28 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!29 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!30 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!31 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!32 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!33 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!34 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!35 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!36 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!37 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!38 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!37 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!38 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             a!37
             a!38
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 36))
(assert (= clrq2.spec.send_idx 38))
(assert (= head.rep.value #x6c65))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x1662)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x1c37)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!740 () Int
  7)
(define-fun clrq2.spec.recv_idx () Int
  36)
(define-fun clrq2.spec.send_idx () Int
  38)
(define-fun head.rep.value () (_ BitVec 16)
  #x6c65)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun |alit:3| () Bool
  false)
(define-fun k!733 () Int
  6)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x6c65)
(define-fun k!727 () Int
  4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x6c65)
(define-fun k!720 () Int
  3)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x6c65)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!743 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xdc65
    #x6c65))
(define-fun k!739 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!743 (k!739 x!0)))
(define-fun clrq2.spec.sent!742 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 36) (= x!1 msg!val!0)) true
    false))
(define-fun k!741 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 36) 36
  (ite (= x!0 2) 2
  (ite (= x!0 18) 18
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 28) 28
  (ite (= x!0 23) 23
  (ite (= x!0 34) 34
  (ite (= x!0 35) 35
    7))))))))))))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!742 (k!741 x!0) (k!739 x!1)))
(define-fun tx ((x!0 msg)) Int
  60)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 24))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!6 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!7 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!8 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!9 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!10 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!11 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!12 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!13 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!14 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!15 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!16 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!18 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!19 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!21 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!22 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!24 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!25 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!26 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!27 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!28 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 28))
(assert (= head.rep.value #x48ca))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xd5b5)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xa59c)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!482 () Int
  3)
(define-fun k!495 () Int
  6)
(define-fun head.rep.value () (_ BitVec 16)
  #x48ca)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  24)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x48ca)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x48ca)
(define-fun clrq1.spec.send_idx () Int
  28)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!489 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x48ca)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!502 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!503 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 24) 24
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 27) 27
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 9) 9
    8))))))))))))))))))))))))))))
(define-fun clrq1.spec.sent!504 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 24) (= x!1 msg!val!0)) true
    false))
(define-fun k!501 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!504 (k!503 x!0) (k!501 x!1)))
(define-fun val!505 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x37f3
    #x48ca))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!505 (k!501 x!0)))
(define-fun tx ((x!0 msg)) Int
  61)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 25))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!6 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!7 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!8 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!9 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!10 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!11 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!12 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!13 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!14 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!15 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!16 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!18 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!19 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!21 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!22 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!24 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!25 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!26 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!27 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!28 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 28))
(assert (= head.rep.value #x80bd))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xf231)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x8a0d)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x80bd)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  25)
(define-fun |alit:3| () Bool
  false)
(define-fun k!509 () Int
  4)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x80bd)
(define-fun k!522 () Int
  7)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x80bd)
(define-fun clrq1.spec.send_idx () Int
  28)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x80bd)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!502 () Int
  3)
(define-fun k!515 () Int
  6)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!521 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!524 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 25) (= x!1 msg!val!0)) true
    false))
(define-fun k!523 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 25) 25
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 9) 9
    7))))))))))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!524 (k!523 x!0) (k!521 x!1)))
(define-fun val!525 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xbb22
    #x80bd))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!525 (k!521 x!0)))
(define-fun tx ((x!0 msg)) Int
  62)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 26))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!6 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!7 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!8 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!9 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!10 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!11 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!12 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!13 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!14 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!15 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!16 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!18 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!19 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!21 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!22 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!24 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!25 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!26 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!27 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!28 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 28))
(assert (= head.rep.value #x3bdf))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #xf274)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xf487)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x3bdf)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!535 () Int
  6)
(define-fun clrq1.spec.recv_idx () Int
  26)
(define-fun |alit:3| () Bool
  false)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x3bdf)
(define-fun k!522 () Int
  3)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x3bdf)
(define-fun clrq1.spec.send_idx () Int
  28)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!529 () Int
  4)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x3bdf)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!542 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!543 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 26) 26
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 9) 9
    8))))))))))))))))))))))))))))
(define-fun k!541 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!544 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 26) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!544 (k!543 x!0) (k!541 x!1)))
(define-fun val!545 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x74c7
    #x3bdf))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!545 (k!541 x!0)))
(define-fun tx ((x!0 msg)) Int
  63)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x1341)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x1341)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 37) true (= (val X__1) #x6730) (= (tx X__1) 64)))
        (a!12 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!13 (and (= X__0 36) true (= (val X__1) #xdc65) (= (tx X__1) 60)))
        (a!14 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!15 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!16 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!17 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!18 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!19 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!20 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!21 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!22 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!23 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!24 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!25 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!26 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!27 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!28 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!29 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!30 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!31 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!32 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!33 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!34 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!35 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!36 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!37 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!38 (and (= X__0 38) true (= (val X__1) #x1341) (= (tx X__1) 66)))
        (a!39 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!37 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!38 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!39 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             a!37
             a!38
             a!39
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 37))
(assert (= clrq2.spec.send_idx 39))
(assert (= head.rep.value #xb0a6))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x36ef)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xc138)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!740 () Int
  3)
(define-fun clrq2.spec.recv_idx () Int
  37)
(define-fun clrq2.spec.send_idx () Int
  39)
(define-fun head.rep.value () (_ BitVec 16)
  #xb0a6)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!747 () Int
  4)
(define-fun k!753 () Int
  6)
(define-fun |alit:3| () Bool
  false)
(define-fun k!760 () Int
  8)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xb0a6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xb0a6)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xb0a6)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!759 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!761 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 7) 7
  (ite (= x!0 36) 36
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 37) 37
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 38) 38
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 34) 34
  (ite (= x!0 35) 35
    8)))))))))))))))))))))))))))))))))))))))
(define-fun val!763 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x6730
    #xb0a6))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!763 (k!759 x!0)))
(define-fun clrq2.spec.sent!762 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 37) (= x!1 msg!val!0)) true
    false))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!762 (k!761 x!0) (k!759 x!1)))
(define-fun tx ((x!0 msg)) Int
  64)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq2.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq2.spec.recv_idx () Int)
(declare-fun clrq2.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq2.spec.recv_idx clrq2.spec.send_idx)
       (clrq2.spec.sent clrq2.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 29) true (= (val X__1) #x8bdb) (= (tx X__1) 49)))
        (a!2 (and (= X__0 31) true (= (val X__1) #x3bb9) (= (tx X__1) 52)))
        (a!3 (and (= X__0 34) true (= (val X__1) #xc7a8) (= (tx X__1) 56)))
        (a!4 (and (= X__0 8) true (= (val X__1) #xff36) (= (tx X__1) 13)))
        (a!5 (and (= X__0 12) true (= (val X__1) #x5850) (= (tx X__1) 18)))
        (a!6 (and (= X__0 23) true (= (val X__1) #x2650) (= (tx X__1) 36)))
        (a!7 (and (= X__0 21) true (= (val X__1) #x756a) (= (tx X__1) 34)))
        (a!8 (and (= X__0 13) true (= (val X__1) #xcf25) (= (tx X__1) 20)))
        (a!9 (and (= X__0 16) true (= (val X__1) #x9a87) (= (tx X__1) 27)))
        (a!10 (and (= X__0 10) true (= (val X__1) #x8c1c) (= (tx X__1) 15)))
        (a!11 (and (= X__0 37) true (= (val X__1) #x6730) (= (tx X__1) 64)))
        (a!12 (and (= X__0 32) true (= (val X__1) #xb1fd) (= (tx X__1) 53)))
        (a!13 (and (= X__0 36) true (= (val X__1) #xdc65) (= (tx X__1) 60)))
        (a!14 (and (= X__0 14) true (= (val X__1) #x8153) (= (tx X__1) 24)))
        (a!15 (and (= X__0 11) true (= (val X__1) #xd3c4) (= (tx X__1) 16)))
        (a!16 (and (= X__0 5) true (= (val X__1) #x579b) (= (tx X__1) 10)))
        (a!17 (and (= X__0 7) true (= (val X__1) #x6e5f) (= (tx X__1) 12)))
        (a!18 (and (= X__0 22) true (= (val X__1) #x11b2) (= (tx X__1) 35)))
        (a!19 (and (= X__0 33) true (= (val X__1) #xa6a4) (= (tx X__1) 55)))
        (a!20 (and (= X__0 19) true (= (val X__1) #x01ff) (= (tx X__1) 32)))
        (a!21 (and (= X__0 1) true (= (val X__1) #xcde7) (= (tx X__1) 2)))
        (a!22 (and (= X__0 27) true (= (val X__1) #x6dfd) (= (tx X__1) 45)))
        (a!23 (and (= X__0 9) true (= (val X__1) #x2233) (= (tx X__1) 14)))
        (a!24 (and (= X__0 26) true (= (val X__1) #x2ee3) (= (tx X__1) 41)))
        (a!25 (and (= X__0 6) true (= (val X__1) #xea3d) (= (tx X__1) 11)))
        (a!26 (and (= X__0 3) true (= (val X__1) #x9eb4) (= (tx X__1) 6)))
        (a!27 (and (= X__0 20) true (= (val X__1) #x843e) (= (tx X__1) 33)))
        (a!28 (and (= X__0 4) true (= (val X__1) #x4adc) (= (tx X__1) 7)))
        (a!29 (and (= X__0 0) true (= (val X__1) #x7ccd) (= (tx X__1) 0)))
        (a!30 (and (= X__0 25) true (= (val X__1) #x38de) (= (tx X__1) 38)))
        (a!31 (and (= X__0 18) true (= (val X__1) #x06d4) (= (tx X__1) 30)))
        (a!32 (and (= X__0 30) true (= (val X__1) #x5211) (= (tx X__1) 51)))
        (a!33 (and (= X__0 24) true (= (val X__1) #xb29f) (= (tx X__1) 37)))
        (a!34 (and (= X__0 15) true (= (val X__1) #xaf98) (= (tx X__1) 26)))
        (a!35 (and (= X__0 35) true (= (val X__1) #x21ca) (= (tx X__1) 57)))
        (a!36 (and (= X__0 28) true (= (val X__1) #x655a) (= (tx X__1) 46)))
        (a!37 (and (= X__0 17) true (= (val X__1) #x08ec) (= (tx X__1) 28)))
        (a!38 (and (= X__0 38) true (= (val X__1) #x1341) (= (tx X__1) 66)))
        (a!39 (and (= X__0 2) true (= (val X__1) #xd95a) (= (tx X__1) 5))))
    (and true
         (=> a!1 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!33 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!34 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!35 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!36 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!37 (= (clrq2.spec.sent X__0 X__1) false))
         (=> a!38 (= (clrq2.spec.sent X__0 X__1) true))
         (=> a!39 (= (clrq2.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             a!33
             a!34
             a!35
             a!36
             a!37
             a!38
             a!39
             (= (clrq2.spec.sent X__0 X__1) false))))))
(assert (= master.tail_failed true))
(assert (= clrq2.spec.recv_idx 38))
(assert (= clrq2.spec.send_idx 39))
(assert (= head.rep.value #x17d6))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x9ea9)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xb4f2)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!773 () Int
  6)
(define-fun clrq2.spec.recv_idx () Int
  38)
(define-fun clrq2.spec.send_idx () Int
  39)
(define-fun head.rep.value () (_ BitVec 16)
  #x17d6)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!760 () Int
  3)
(define-fun |alit:3| () Bool
  false)
(define-fun k!780 () Int
  7)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x17d6)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x17d6)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x17d6)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!767 () Int
  4)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun val!783 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x1341
    #x17d6))
(define-fun k!779 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!783 (k!779 x!0)))
(define-fun clrq2.spec.sent!782 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 38) (= x!1 msg!val!0)) true
    false))
(define-fun k!781 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 17) 17
  (ite (= x!0 18) 18
  (ite (= x!0 2) 2
  (ite (= x!0 0) 0
  (ite (= x!0 1) 1
  (ite (= x!0 36) 36
  (ite (= x!0 8) 8
  (ite (= x!0 32) 32
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 16) 16
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 38) 38
  (ite (= x!0 3) 3
  (ite (= x!0 14) 14
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 6) 6
  (ite (= x!0 19) 19
  (ite (= x!0 37) 37
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 26) 26
  (ite (= x!0 9) 9
  (ite (= x!0 27) 27
  (ite (= x!0 11) 11
  (ite (= x!0 13) 13
  (ite (= x!0 28) 28
  (ite (= x!0 21) 21
  (ite (= x!0 23) 23
  (ite (= x!0 34) 34
  (ite (= x!0 35) 35
    7)))))))))))))))))))))))))))))))))))))))
(define-fun clrq2.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq2.spec.sent!782 (k!781 x!0) (k!779 x!1)))
(define-fun tx ((x!0 msg)) Int
  66)begin sat:
(declare-sort msg)
(declare-fun ref.committed (Int) Bool)
(declare-fun |__new_fml:tx| () Int)
(declare-fun |__new_loc:0| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:p| () msg)
(declare-fun |__new_fml:res| () (_ BitVec 16))
(declare-fun tx (msg) Int)
(declare-fun ref.txres (Int) (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(assert (and (= |__new_fml:res| (ref.txres |__new_fml:tx|))
     (= |__new_fml:tx| (tx |__fml:p|))
     (= |__new_loc:0| |__new_fml:res|)
     (= (val |__fml:p|) |__new_loc:0|)
     (ref.committed |__new_fml:tx|)))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.txres X__0) #x0000))
       (=> (= X__0 1) (= (ref.txres X__0) #x4ab4))
       (=> (= X__0 2) (= (ref.txres X__0) #x7ccd))
       (=> (= X__0 3) (= (ref.txres X__0) #x4c06))
       (=> (= X__0 4) (= (ref.txres X__0) #x1014))
       (=> (= X__0 5) (= (ref.txres X__0) #x72ac))
       (=> (= X__0 6) (= (ref.txres X__0) #x7160))
       (=> (= X__0 7) (= (ref.txres X__0) #xd247))
       (=> (= X__0 8) (= (ref.txres X__0) #x1d23))
       (=> (= X__0 9) (= (ref.txres X__0) #x69e0))
       (=> (= X__0 10) (= (ref.txres X__0) #x2808))
       (=> (= X__0 11) (= (ref.txres X__0) #x7fa3))
       (=> (= X__0 12) (= (ref.txres X__0) #xc7fb))
       (=> (= X__0 13) (= (ref.txres X__0) #x365a))
       (=> (= X__0 14) (= (ref.txres X__0) #x3590))
       (=> (= X__0 15) (= (ref.txres X__0) #x1cec))
       (=> (= X__0 16) (= (ref.txres X__0) #x814c))
       (=> (= X__0 17) (= (ref.txres X__0) #x57c3))
       (=> (= X__0 18) (= (ref.txres X__0) #x9bcc))
       (=> (= X__0 19) (= (ref.txres X__0) #x23f6))
       (=> (= X__0 20) (= (ref.txres X__0) #x5005))
       (=> (= X__0 21) (= (ref.txres X__0) #xa908))
       (=> (= X__0 22) (= (ref.txres X__0) #x5510))
       (=> (= X__0 23) (= (ref.txres X__0) #xf41c))
       (=> (= X__0 24) (= (ref.txres X__0) #x1f2a))
       (=> (= X__0 25) (= (ref.txres X__0) #xfa5c))
       (=> (= X__0 26) (= (ref.txres X__0) #xa07d))
       (=> (= X__0 27) (= (ref.txres X__0) #x5015))
       (=> (= X__0 28) (= (ref.txres X__0) #xea9c))
       (=> (= X__0 29) (= (ref.txres X__0) #xcd2e))
       (=> (= X__0 30) (= (ref.txres X__0) #xf388))
       (=> (= X__0 31) (= (ref.txres X__0) #x8e1d))
       (=> (= X__0 32) (= (ref.txres X__0) #x2fae))
       (=> (= X__0 33) (= (ref.txres X__0) #x31ad))
       (=> (= X__0 34) (= (ref.txres X__0) #xb5eb))
       (=> (= X__0 35) (= (ref.txres X__0) #x2b55))
       (=> (= X__0 36) (= (ref.txres X__0) #x3d07))
       (=> (= X__0 37) (= (ref.txres X__0) #xfa72))
       (=> (= X__0 38) (= (ref.txres X__0) #xe4de))
       (=> (= X__0 39) (= (ref.txres X__0) #x6357))
       (=> (= X__0 40) (= (ref.txres X__0) #xad11))
       (=> (= X__0 41) (= (ref.txres X__0) #x1dbc))
       (=> (= X__0 42) (= (ref.txres X__0) #xea1e))
       (=> (= X__0 43) (= (ref.txres X__0) #xabd1))
       (=> (= X__0 44) (= (ref.txres X__0) #xa5e2))
       (=> (= X__0 45) (= (ref.txres X__0) #x4c9f))
       (=> (= X__0 46) (= (ref.txres X__0) #xba9c))
       (=> (= X__0 47) (= (ref.txres X__0) #x847a))
       (=> (= X__0 48) (= (ref.txres X__0) #xb5ac))
       (=> (= X__0 49) (= (ref.txres X__0) #x1ff6))
       (=> (= X__0 50) (= (ref.txres X__0) #x0c07))
       (=> (= X__0 51) (= (ref.txres X__0) #xa537))
       (=> (= X__0 52) (= (ref.txres X__0) #xd730))
       (=> (= X__0 53) (= (ref.txres X__0) #x12e9))
       (=> (= X__0 54) (= (ref.txres X__0) #x8adb))
       (=> (= X__0 55) (= (ref.txres X__0) #xc4e6))
       (=> (= X__0 56) (= (ref.txres X__0) #x6b8a))
       (=> (= X__0 57) (= (ref.txres X__0) #x4a9b))
       (=> (= X__0 58) (= (ref.txres X__0) #xf748))
       (=> (= X__0 59) (= (ref.txres X__0) #x3332))
       (=> (= X__0 60) (= (ref.txres X__0) #x6c65))
       (=> (= X__0 61) (= (ref.txres X__0) #x48ca))
       (=> (= X__0 62) (= (ref.txres X__0) #x80bd))
       (=> (= X__0 63) (= (ref.txres X__0) #x3bdf))
       (=> (= X__0 64) (= (ref.txres X__0) #xb0a6))
       (=> (= X__0 66) (= (ref.txres X__0) #x17d6))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= X__0 51)
           (= X__0 52)
           (= X__0 53)
           (= X__0 54)
           (= X__0 55)
           (= X__0 56)
           (= X__0 57)
           (= X__0 58)
           (= X__0 59)
           (= X__0 60)
           (= X__0 61)
           (= X__0 62)
           (= X__0 63)
           (= X__0 64)
           (= X__0 66)
           true))))
(assert (forall ((X__0 Int))
  (and true
       (=> (= X__0 0) (= (ref.committed X__0) true))
       (=> (= X__0 1) (= (ref.committed X__0) true))
       (=> (= X__0 2) (= (ref.committed X__0) true))
       (=> (= X__0 3) (= (ref.committed X__0) true))
       (=> (= X__0 4) (= (ref.committed X__0) true))
       (=> (= X__0 5) (= (ref.committed X__0) true))
       (=> (= X__0 6) (= (ref.committed X__0) true))
       (=> (= X__0 7) (= (ref.committed X__0) true))
       (=> (= X__0 8) (= (ref.committed X__0) true))
       (=> (= X__0 9) (= (ref.committed X__0) true))
       (=> (= X__0 10) (= (ref.committed X__0) true))
       (=> (= X__0 11) (= (ref.committed X__0) true))
       (=> (= X__0 12) (= (ref.committed X__0) true))
       (=> (= X__0 13) (= (ref.committed X__0) true))
       (=> (= X__0 14) (= (ref.committed X__0) true))
       (=> (= X__0 15) (= (ref.committed X__0) true))
       (=> (= X__0 16) (= (ref.committed X__0) true))
       (=> (= X__0 17) (= (ref.committed X__0) true))
       (=> (= X__0 18) (= (ref.committed X__0) true))
       (=> (= X__0 19) (= (ref.committed X__0) true))
       (=> (= X__0 20) (= (ref.committed X__0) true))
       (=> (= X__0 21) (= (ref.committed X__0) true))
       (=> (= X__0 22) (= (ref.committed X__0) true))
       (=> (= X__0 23) (= (ref.committed X__0) true))
       (=> (= X__0 24) (= (ref.committed X__0) true))
       (=> (= X__0 25) (= (ref.committed X__0) true))
       (=> (= X__0 26) (= (ref.committed X__0) true))
       (=> (= X__0 27) (= (ref.committed X__0) true))
       (=> (= X__0 28) (= (ref.committed X__0) true))
       (=> (= X__0 29) (= (ref.committed X__0) true))
       (=> (= X__0 30) (= (ref.committed X__0) true))
       (=> (= X__0 31) (= (ref.committed X__0) true))
       (=> (= X__0 32) (= (ref.committed X__0) true))
       (=> (= X__0 33) (= (ref.committed X__0) true))
       (=> (= X__0 34) (= (ref.committed X__0) true))
       (=> (= X__0 35) (= (ref.committed X__0) true))
       (=> (= X__0 36) (= (ref.committed X__0) true))
       (=> (= X__0 37) (= (ref.committed X__0) true))
       (=> (= X__0 38) (= (ref.committed X__0) true))
       (=> (= X__0 39) (= (ref.committed X__0) true))
       (=> (= X__0 40) (= (ref.committed X__0) true))
       (=> (= X__0 41) (= (ref.committed X__0) true))
       (=> (= X__0 42) (= (ref.committed X__0) true))
       (=> (= X__0 43) (= (ref.committed X__0) true))
       (=> (= X__0 44) (= (ref.committed X__0) true))
       (=> (= X__0 45) (= (ref.committed X__0) true))
       (=> (= X__0 46) (= (ref.committed X__0) true))
       (=> (= X__0 47) (= (ref.committed X__0) true))
       (=> (= X__0 48) (= (ref.committed X__0) true))
       (=> (= X__0 49) (= (ref.committed X__0) true))
       (=> (= X__0 50) (= (ref.committed X__0) true))
       (=> (= X__0 51) (= (ref.committed X__0) true))
       (=> (= X__0 52) (= (ref.committed X__0) true))
       (=> (= X__0 53) (= (ref.committed X__0) true))
       (=> (= X__0 54) (= (ref.committed X__0) true))
       (=> (= X__0 55) (= (ref.committed X__0) true))
       (=> (= X__0 56) (= (ref.committed X__0) true))
       (=> (= X__0 57) (= (ref.committed X__0) true))
       (=> (= X__0 58) (= (ref.committed X__0) true))
       (=> (= X__0 59) (= (ref.committed X__0) true))
       (=> (= X__0 60) (= (ref.committed X__0) true))
       (=> (= X__0 61) (= (ref.committed X__0) true))
       (=> (= X__0 62) (= (ref.committed X__0) true))
       (=> (= X__0 63) (= (ref.committed X__0) true))
       (=> (= X__0 64) (= (ref.committed X__0) true))
       (=> (= X__0 66) (= (ref.committed X__0) true))
       (or false
           (= X__0 0)
           (= X__0 1)
           (= X__0 2)
           (= X__0 3)
           (= X__0 4)
           (= X__0 5)
           (= X__0 6)
           (= X__0 7)
           (= X__0 8)
           (= X__0 9)
           (= X__0 10)
           (= X__0 11)
           (= X__0 12)
           (= X__0 13)
           (= X__0 14)
           (= X__0 15)
           (= X__0 16)
           (= X__0 17)
           (= X__0 18)
           (= X__0 19)
           (= X__0 20)
           (= X__0 21)
           (= X__0 22)
           (= X__0 23)
           (= X__0 24)
           (= X__0 25)
           (= X__0 26)
           (= X__0 27)
           (= X__0 28)
           (= X__0 29)
           (= X__0 30)
           (= X__0 31)
           (= X__0 32)
           (= X__0 33)
           (= X__0 34)
           (= X__0 35)
           (= X__0 36)
           (= X__0 37)
           (= X__0 38)
           (= X__0 39)
           (= X__0 40)
           (= X__0 41)
           (= X__0 42)
           (= X__0 43)
           (= X__0 44)
           (= X__0 45)
           (= X__0 46)
           (= X__0 47)
           (= X__0 48)
           (= X__0 49)
           (= X__0 50)
           (= X__0 51)
           (= X__0 52)
           (= X__0 53)
           (= X__0 54)
           (= X__0 55)
           (= X__0 56)
           (= X__0 57)
           (= X__0 58)
           (= X__0 59)
           (= X__0 60)
           (= X__0 61)
           (= X__0 62)
           (= X__0 63)
           (= X__0 64)
           (= X__0 66)
           (= (ref.committed X__0) false)))))
(assert (or (not |alit:0|) (= (val |__fml:p|) #xe036)))
(assert (or (not |alit:1|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
;; cardinality constraint:
(forall ((x msg)) (= x msg!val!0))
;; -----------
(define-fun |alit:1| () Bool
  true)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__new_fml:tx| () Int
  0)
(define-fun |__new_fml:res| () (_ BitVec 16)
  #x0000)
(define-fun |__new_loc:0| () (_ BitVec 16)
  #x0000)
(define-fun k!1705 () Int
  65)
(define-fun |alit:0| () Bool
  false)
(define-fun ref.committed!1771 ((x!0 Int)) Bool
  (ite (= x!0 65) false
    true))
(define-fun k!1770 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 63) 63
  (ite (= x!0 45) 45
  (ite (= x!0 8) 8
  (ite (= x!0 7) 7
  (ite (= x!0 47) 47
  (ite (= x!0 0) 0
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 51) 51
  (ite (= x!0 44) 44
  (ite (= x!0 53) 53
  (ite (= x!0 25) 25
  (ite (= x!0 56) 56
  (ite (= x!0 66) 66
  (ite (= x!0 62) 62
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 58) 58
  (ite (= x!0 26) 26
  (ite (= x!0 59) 59
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 57) 57
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 55) 55
  (ite (= x!0 52) 52
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 60) 60
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 64) 64
  (ite (= x!0 14) 14
  (ite (= x!0 61) 61
  (ite (= x!0 29) 29
  (ite (= x!0 3) 3
  (ite (= x!0 54) 54
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.committed ((x!0 Int)) Bool
  (ref.committed!1771 (k!1770 x!0)))
(define-fun k!1769 ((x!0 Int)) Int
  (ite (= x!0 36) 36
  (ite (= x!0 18) 18
  (ite (= x!0 41) 41
  (ite (= x!0 17) 17
  (ite (= x!0 63) 63
  (ite (= x!0 45) 45
  (ite (= x!0 8) 8
  (ite (= x!0 7) 7
  (ite (= x!0 47) 47
  (ite (= x!0 0) 0
  (ite (= x!0 48) 48
  (ite (= x!0 33) 33
  (ite (= x!0 22) 22
  (ite (= x!0 51) 51
  (ite (= x!0 44) 44
  (ite (= x!0 53) 53
  (ite (= x!0 25) 25
  (ite (= x!0 56) 56
  (ite (= x!0 66) 66
  (ite (= x!0 62) 62
  (ite (= x!0 39) 39
  (ite (= x!0 50) 50
  (ite (= x!0 4) 4
  (ite (= x!0 6) 6
  (ite (= x!0 37) 37
  (ite (= x!0 24) 24
  (ite (= x!0 58) 58
  (ite (= x!0 26) 26
  (ite (= x!0 59) 59
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 57) 57
  (ite (= x!0 46) 46
  (ite (= x!0 42) 42
  (ite (= x!0 55) 55
  (ite (= x!0 52) 52
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 2) 2
  (ite (= x!0 1) 1
  (ite (= x!0 60) 60
  (ite (= x!0 32) 32
  (ite (= x!0 16) 16
  (ite (= x!0 49) 49
  (ite (= x!0 20) 20
  (ite (= x!0 43) 43
  (ite (= x!0 40) 40
  (ite (= x!0 5) 5
  (ite (= x!0 64) 64
  (ite (= x!0 14) 14
  (ite (= x!0 61) 61
  (ite (= x!0 29) 29
  (ite (= x!0 3) 3
  (ite (= x!0 54) 54
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 10) 10
  (ite (= x!0 38) 38
  (ite (= x!0 27) 27
  (ite (= x!0 34) 34
  (ite (= x!0 21) 21
  (ite (= x!0 13) 13
  (ite (= x!0 11) 11
  (ite (= x!0 9) 9
  (ite (= x!0 35) 35
    15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun ref.txres!1772 ((x!0 Int)) (_ BitVec 16)
  (ite (= x!0 2) #x7ccd
  (ite (= x!0 31) #x8e1d
  (ite (= x!0 59) #x3332
  (ite (= x!0 44) #xa5e2
  (ite (= x!0 6) #x7160
  (ite (= x!0 26) #xa07d
  (ite (= x!0 15) #x1cec
  (ite (= x!0 39) #x6357
  (ite (= x!0 7) #xd247
  (ite (= x!0 18) #x9bcc
  (ite (= x!0 66) #x17d6
  (ite (= x!0 10) #x2808
  (ite (= x!0 3) #x4c06
  (ite (= x!0 1) #x4ab4
  (ite (= x!0 36) #x3d07
  (ite (= x!0 35) #x2b55
  (ite (= x!0 63) #x3bdf
  (ite (= x!0 51) #xa537
  (ite (= x!0 8) #x1d23
  (ite (= x!0 17) #x57c3
  (ite (= x!0 41) #x1dbc
  (ite (= x!0 52) #xd730
  (ite (= x!0 16) #x814c
  (ite (= x!0 54) #x8adb
  (ite (= x!0 38) #xe4de
  (ite (= x!0 34) #xb5eb
  (ite (= x!0 30) #xf388
  (ite (= x!0 19) #x23f6
  (ite (= x!0 9) #x69e0
  (ite (= x!0 64) #xb0a6
  (ite (= x!0 61) #x48ca
  (ite (= x!0 60) #x6c65
  (ite (= x!0 49) #x1ff6
  (ite (= x!0 43) #xabd1
  (ite (= x!0 40) #xad11
  (ite (= x!0 32) #x2fae
  (ite (= x!0 14) #x3590
  (ite (= x!0 22) #x5510
  (ite (= x!0 47) #x847a
  (ite (= x!0 56) #x6b8a
  (ite (= x!0 33) #x31ad
  (ite (= x!0 45) #x4c9f
  (ite (= x!0 4) #x1014
  (ite (= x!0 48) #xb5ac
  (ite (= x!0 58) #xf748
  (ite (= x!0 27) #x5015
  (ite (= x!0 42) #xea1e
  (ite (= x!0 62) #x80bd
  (ite (= x!0 53) #x12e9
  (ite (= x!0 25) #xfa5c
  (ite (= x!0 50) #x0c07
  (ite (= x!0 12) #xc7fb
  (ite (= x!0 20) #x5005
  (ite (= x!0 55) #xc4e6
  (ite (= x!0 57) #x4a9b
  (ite (= x!0 46) #xba9c
  (ite (= x!0 28) #xea9c
  (ite (= x!0 37) #xfa72
  (ite (= x!0 24) #x1f2a
  (ite (= x!0 23) #xf41c
  (ite (= x!0 13) #x365a
  (ite (= x!0 21) #xa908
  (ite (= x!0 5) #x72ac
  (ite (= x!0 29) #xcd2e
  (ite (= x!0 11) #x7fa3
    #x0000))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  #x0000)
(define-fun ref.txres ((x!0 Int)) (_ BitVec 16)
  (ref.txres!1772 (k!1769 x!0)))
(define-fun tx ((x!0 msg)) Int
  0)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 27))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!5 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!6 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!7 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!8 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!9 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!10 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!11 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!12 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!13 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!14 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!15 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!16 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!17 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!18 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!19 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!20 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!21 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!22 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!23 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!24 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!25 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!26 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!27 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!28 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 28))
(assert (= head.rep.value #x2b17))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x63f1)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x1b8d)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #x2b17)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun k!555 () Int
  6)
(define-fun clrq1.spec.recv_idx () Int
  27)
(define-fun |alit:3| () Bool
  false)
(define-fun k!562 () Int
  7)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x2b17)
(define-fun k!549 () Int
  4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x2b17)
(define-fun clrq1.spec.send_idx () Int
  28)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x2b17)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!542 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!561 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!564 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 27) (= x!1 msg!val!0)) true
    false))
(define-fun k!563 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 27) 27
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 9) 9
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
    7))))))))))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!564 (k!563 x!0) (k!561 x!1)))
(define-fun val!565 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x98b7
    #x2b17))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!565 (k!561 x!0)))
(define-fun tx ((x!0 msg)) Int
  65)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x893d)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x893d)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x3692)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x3692)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xd7c9)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xd7c9)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x0ea5)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x0ea5)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 28))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 29) true (= (val X__1) #xd7c9) (= (tx X__1) 69)))
        (a!5 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!6 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!7 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!8 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!9 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!10 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!11 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!12 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!13 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!14 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!16 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!17 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!18 (and (= X__0 28) true (= (val X__1) #x893d) (= (tx X__1) 67)))
        (a!19 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!20 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!21 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!22 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!23 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!24 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!25 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!26 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!27 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!28 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!29 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!30 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 30))
(assert (= head.rep.value #xc3ce))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6d64)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xa642)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun head.rep.value () (_ BitVec 16)
  #xc3ce)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  28)
(define-fun |alit:3| () Bool
  false)
(define-fun k!562 () Int
  3)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #xc3ce)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #xc3ce)
(define-fun clrq1.spec.send_idx () Int
  30)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!575 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #xc3ce)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!569 () Int
  4)
(define-fun k!582 () Int
  8)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!583 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 28) 28
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 9) 9
    8))))))))))))))))))))))))))))))
(define-fun k!581 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!584 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 28) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!584 (k!583 x!0) (k!581 x!1)))
(define-fun val!585 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #x893d
    #xc3ce))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!585 (k!581 x!0)))
(define-fun tx ((x!0 msg)) Int
  67)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xe1dc)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xe1dc)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x66aa)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x66aa)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 29))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 29) true (= (val X__1) #xd7c9) (= (tx X__1) 69)))
        (a!5 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!6 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!7 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!8 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!9 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!10 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!11 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!12 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!13 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!14 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!16 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!17 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!18 (and (= X__0 28) true (= (val X__1) #x893d) (= (tx X__1) 67)))
        (a!19 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!20 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!21 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!22 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!23 (and (= X__0 31) true (= (val X__1) #x66aa) (= (tx X__1) 72)))
        (a!24 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!25 (and (= X__0 30) true (= (val X__1) #xe1dc) (= (tx X__1) 71)))
        (a!26 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!27 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!28 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!29 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!30 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!31 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!32 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 32))
(assert (= head.rep.value #x4d0b))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x8ea4)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #x4adc)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!589 () Int
  4)
(define-fun head.rep.value () (_ BitVec 16)
  #x4d0b)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  29)
(define-fun |alit:3| () Bool
  false)
(define-fun k!602 () Int
  7)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x4d0b)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x4d0b)
(define-fun clrq1.spec.send_idx () Int
  32)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!595 () Int
  6)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x4d0b)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun k!582 () Int
  3)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun clrq1.spec.sent!604 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 29) (= x!1 msg!val!0)) true
    false))
(define-fun k!601 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun k!603 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 29) 29
  (ite (= x!0 2) 2
  (ite (= x!0 8) 8
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 4) 4
  (ite (= x!0 30) 30
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    7))))))))))))))))))))))))))))))))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!604 (k!603 x!0) (k!601 x!1)))
(define-fun val!605 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xd7c9
    #x4d0b))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!605 (k!601 x!0)))
(define-fun tx ((x!0 msg)) Int
  69)begin sat:
(declare-sort msg)
(declare-fun master.tail_failed () Bool)
(declare-fun __ts0_a () Bool)
(declare-fun |__new_loc:res| () (_ BitVec 16))
(declare-fun val (msg) (_ BitVec 16))
(declare-fun |__fml:inp_nd| () msg)
(declare-fun tx (msg) Int)
(declare-fun |__m_fml:inp| () msg)
(declare-fun clrq1.spec.sent (Int msg) Bool)
(declare-fun |__fml:p| () msg)
(declare-fun clrq1.spec.recv_idx () Int)
(declare-fun clrq1.spec.send_idx () Int)
(declare-fun |__new_loc:0_a_a| () (_ BitVec 16))
(declare-fun |__new_fml:out| () (_ BitVec 16))
(declare-fun head.rep.value () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(declare-fun |alit:1| () Bool)
(declare-fun |alit:2| () Bool)
(declare-fun |alit:3| () Bool)
(assert (let ((a!1 (or __ts0_a
               (and (= (tx |__fml:inp_nd|) (tx |__m_fml:inp|))
                    (= (val |__fml:inp_nd|) |__new_loc:res|)))))
  (and (= |__m_fml:inp| |__fml:p|)
       (= |__new_fml:out| head.rep.value)
       (= |__new_loc:0_a_a| |__new_fml:out|)
       (= |__new_loc:res| |__new_loc:0_a_a|)
       (< clrq1.spec.recv_idx clrq1.spec.send_idx)
       (clrq1.spec.sent clrq1.spec.recv_idx |__fml:p|)
       a!1
       (= __ts0_a (not master.tail_failed)))))
(assert (= master.tail_failed true))
(assert (= clrq1.spec.recv_idx 30))
(assert (forall ((X__0 Int) (X__1 msg))
  (let ((a!1 (and (= X__0 6) true (= (val X__1) #xf8f6) (= (tx X__1) 19)))
        (a!2 (and (= X__0 22) true (= (val X__1) #xdfe8) (= (tx X__1) 58)))
        (a!3 (and (= X__0 0) true (= (val X__1) #x27f8) (= (tx X__1) 1)))
        (a!4 (and (= X__0 29) true (= (val X__1) #xd7c9) (= (tx X__1) 69)))
        (a!5 (and (= X__0 7) true (= (val X__1) #xd844) (= (tx X__1) 21)))
        (a!6 (and (= X__0 2) true (= (val X__1) #xc233) (= (tx X__1) 4)))
        (a!7 (and (= X__0 12) true (= (val X__1) #xa191) (= (tx X__1) 31)))
        (a!8 (and (= X__0 8) true (= (val X__1) #x46bc) (= (tx X__1) 22)))
        (a!9 (and (= X__0 15) true (= (val X__1) #xfac0) (= (tx X__1) 42)))
        (a!10 (and (= X__0 17) true (= (val X__1) #xde98) (= (tx X__1) 44)))
        (a!11 (and (= X__0 27) true (= (val X__1) #x98b7) (= (tx X__1) 65)))
        (a!12 (and (= X__0 19) true (= (val X__1) #x565b) (= (tx X__1) 48)))
        (a!13 (and (= X__0 1) true (= (val X__1) #x255a) (= (tx X__1) 3)))
        (a!14 (and (= X__0 25) true (= (val X__1) #xbb22) (= (tx X__1) 62)))
        (a!15 (and (= X__0 9) true (= (val X__1) #x5be9) (= (tx X__1) 23)))
        (a!16 (and (= X__0 23) true (= (val X__1) #x1769) (= (tx X__1) 59)))
        (a!17 (and (= X__0 11) true (= (val X__1) #xc0ef) (= (tx X__1) 29)))
        (a!18 (and (= X__0 28) true (= (val X__1) #x893d) (= (tx X__1) 67)))
        (a!19 (and (= X__0 26) true (= (val X__1) #x74c7) (= (tx X__1) 63)))
        (a!20 (and (= X__0 21) true (= (val X__1) #x1a5c) (= (tx X__1) 54)))
        (a!21 (and (= X__0 5) true (= (val X__1) #xcc33) (= (tx X__1) 17)))
        (a!22 (and (= X__0 4) true (= (val X__1) #x5e1b) (= (tx X__1) 9)))
        (a!23 (and (= X__0 31) true (= (val X__1) #x66aa) (= (tx X__1) 72)))
        (a!24 (and (= X__0 3) true (= (val X__1) #x0ae5) (= (tx X__1) 8)))
        (a!25 (and (= X__0 30) true (= (val X__1) #xe1dc) (= (tx X__1) 71)))
        (a!26 (and (= X__0 24) true (= (val X__1) #x37f3) (= (tx X__1) 61)))
        (a!27 (and (= X__0 18) true (= (val X__1) #x3132) (= (tx X__1) 47)))
        (a!28 (and (= X__0 13) true (= (val X__1) #x971b) (= (tx X__1) 39)))
        (a!29 (and (= X__0 14) true (= (val X__1) #x3d0d) (= (tx X__1) 40)))
        (a!30 (and (= X__0 20) true (= (val X__1) #x7ed4) (= (tx X__1) 50)))
        (a!31 (and (= X__0 10) true (= (val X__1) #xd2d2) (= (tx X__1) 25)))
        (a!32 (and (= X__0 16) true (= (val X__1) #xfa11) (= (tx X__1) 43))))
    (and true
         (=> a!1 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!2 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!3 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!4 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!5 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!6 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!7 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!8 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!9 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!10 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!11 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!12 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!13 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!14 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!15 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!16 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!17 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!18 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!19 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!20 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!21 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!22 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!23 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!24 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!25 (= (clrq1.spec.sent X__0 X__1) true))
         (=> a!26 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!27 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!28 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!29 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!30 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!31 (= (clrq1.spec.sent X__0 X__1) false))
         (=> a!32 (= (clrq1.spec.sent X__0 X__1) false))
         (or false
             a!1
             a!2
             a!3
             a!4
             a!5
             a!6
             a!7
             a!8
             a!9
             a!10
             a!11
             a!12
             a!13
             a!14
             a!15
             a!16
             a!17
             a!18
             a!19
             a!20
             a!21
             a!22
             a!23
             a!24
             a!25
             a!26
             a!27
             a!28
             a!29
             a!30
             a!31
             a!32
             (= (clrq1.spec.sent X__0 X__1) false))))))
(assert (= clrq1.spec.send_idx 32))
(assert (= head.rep.value #x24d4))
(assert (or (not |alit:0|) (= (val |__fml:inp_nd|) #x6fca)))
(assert (or (not |alit:1|) (= (tx |__fml:inp_nd|) 0)))
(assert (or (not |alit:2|) (= (val |__fml:p|) #xb9ab)))
(assert (or (not |alit:3|) (= (tx |__fml:p|) 0)))
end sat:

;; universe for msg:
;;   msg!val!0 msg!val!1 
;; -----------
;; definitions for universe elements:
(declare-fun msg!val!0 () msg)
(declare-fun msg!val!1 () msg)
;; cardinality constraint:
(forall ((x msg)) (or (= x msg!val!0) (= x msg!val!1)))
;; -----------
(define-fun k!615 () Int
  6)
(define-fun head.rep.value () (_ BitVec 16)
  #x24d4)
(define-fun |__fml:inp_nd| () msg
  msg!val!1)
(define-fun |alit:1| () Bool
  false)
(define-fun clrq1.spec.recv_idx () Int
  30)
(define-fun |alit:3| () Bool
  false)
(define-fun k!602 () Int
  3)
(define-fun |__new_loc:res| () (_ BitVec 16)
  #x24d4)
(define-fun |__new_loc:0_a_a| () (_ BitVec 16)
  #x24d4)
(define-fun clrq1.spec.send_idx () Int
  32)
(define-fun master.tail_failed () Bool
  true)
(define-fun __ts0_a () Bool
  false)
(define-fun |alit:2| () Bool
  false)
(define-fun k!609 () Int
  4)
(define-fun k!622 () Int
  8)
(define-fun |__new_fml:out| () (_ BitVec 16)
  #x24d4)
(define-fun |__fml:p| () msg
  msg!val!0)
(define-fun |__m_fml:inp| () msg
  msg!val!0)
(define-fun |alit:0| () Bool
  false)
(define-fun k!623 ((x!0 Int)) Int
  (ite (= x!0 15) 15
  (ite (= x!0 31) 31
  (ite (= x!0 12) 12
  (ite (= x!0 18) 18
  (ite (= x!0 1) 1
  (ite (= x!0 17) 17
  (ite (= x!0 30) 30
  (ite (= x!0 2) 2
  (ite (= x!0 7) 7
  (ite (= x!0 0) 0
  (ite (= x!0 16) 16
  (ite (= x!0 22) 22
  (ite (= x!0 20) 20
  (ite (= x!0 25) 25
  (ite (= x!0 5) 5
  (ite (= x!0 14) 14
  (ite (= x!0 3) 3
  (ite (= x!0 29) 29
  (ite (= x!0 4) 4
  (ite (= x!0 19) 19
  (ite (= x!0 6) 6
  (ite (= x!0 10) 10
  (ite (= x!0 24) 24
  (ite (= x!0 27) 27
  (ite (= x!0 13) 13
  (ite (= x!0 21) 21
  (ite (= x!0 26) 26
  (ite (= x!0 11) 11
  (ite (= x!0 23) 23
  (ite (= x!0 28) 28
  (ite (= x!0 9) 9
    8))))))))))))))))))))))))))))))))
(define-fun k!621 ((x!0 msg)) msg
  (ite (= x!0 msg!val!1) msg!val!1
    msg!val!0))
(define-fun clrq1.spec.sent!624 ((x!0 Int) (x!1 msg)) Bool
  (ite (and (= x!0 30) (= x!1 msg!val!0)) true
    false))
(define-fun clrq1.spec.sent ((x!0 Int) (x!1 msg)) Bool
  (clrq1.spec.sent!624 (k!623 x!0) (k!621 x!1)))
(define-fun val!625 ((x!0 msg)) (_ BitVec 16)
  (ite (= x!0 msg!val!0) #xe1dc
    #x24d4))
(define-fun val ((x!0 msg)) (_ BitVec 16)
  (val!625 (k!621 x!0)))
(define-fun tx ((x!0 msg)) Int
  71)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x5f95)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x5f95)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #xfd38)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #xfd38)
(define-fun |alit:0| () Bool
  true)begin sat:
(declare-fun |fml:val| () (_ BitVec 16))
(declare-fun |alit:0| () Bool)
(assert and)
(assert (or (not |alit:0|) (= |fml:val| #x63e3)))
end sat:

(define-fun |fml:val| () (_ BitVec 16)
  #x63e3)
(define-fun |alit:0| () Bool
  true)