# This structure keeps track of the transport parameter types
# occurring in a `quic_transport_parameters` instance. This structure
# is refined below for each transport parameter type.

object transport_parameters_present = {
    type this
    action empty returns(x:this) = {
    }
}

# This generic module handles various transport parameters. For any
# transport parameter type, this handler records the presence of the
# parameter type in a `transport_parameters_present` structure.
#
# Requirement:
#
# - Each transport parameter type may occur at most once in a
#   `quic_transport_parameters` instance [1].

module client_transport_parameter_handler(ptype) = {
    destructor contains_this(P:transport_parameters_present) : bool
    action handle_client_transport_parameter
        (tp:ptype,
         src:ip.endpoint,
         dst:ip.endpoint,
         pcid:cid,
         present:transport_parameters_present)
    returns (present:transport_parameters_present) =
    {
        require ~contains_this(present);  # [1]
        contains_this(present) := true;
    }
    after transport_parameters_present.empty returns(x:transport_parameters_present) {
        contains_this(x) := false;
    }
}    

# The rules for each variant of `transport parameter` issued by a
# client are defined below. The action `handle_transport_parameter` is
# the default handler, with specializations following.

action handle_client_transport_parameter
    (tp:transport_parameter,
     src:ip.endpoint,
     dst:ip.endpoint,
     pcid:cid,
     present:transport_parameters_present)
returns (present:transport_parameters_present) =
{
}

# Requirement:
#
# - The client must not issue a stateless reset token [1].

object stateless_reset_token = { ...
    instantiate client_transport_parameter_handler(this)
    after handle_client_transport_parameter {
        require false;  # [1]
    }
}

object initial_max_stream_data = { ...
    instantiate client_transport_parameter_handler(this)
    after handle_client_transport_parameter {
    }
}

object initial_max_data = { ...
    instantiate client_transport_parameter_handler(this)
    after handle_client_transport_parameter {
    }
}

object idle_timeout = { ...
    instantiate client_transport_parameter_handler(this)
    after handle_client_transport_parameter {
    }
}
