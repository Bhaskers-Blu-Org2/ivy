---
layout: page
title: Message Queues
---

Our message transport service needs an abstract type of [message
queues](queue.ivy) to support reliable delivery. The message queue
holds messages that have been sent (to a particular host) but whose
delivery has not yet been acknowledged.

Here is the interface for message queues:

    module message_queue(net_msg,seq_num) = {

	action enqueue(msg:net_msg.t)
	action empty returns (res:bool)
	action pick_one returns (res:net_msg.t)
	action delete_all(seq:seq_num)

	...

The module takes a type `net_msg` of messages and type `seq_num` of
sequences numbers as parameters. The `enqueue` action adds a message
to the queue, `empty` action returns true if the queue is empty,
pick_one returns some message from a non-empty queue and `delete_all`
removes all of the messages with sequence number less than or equal to
`seq_num`.

The abstract state of the queue is held by the predicate `contents`
which represents the set of all messages currently in the queue:

    relation contents(M:net_msg.t)

Here is the specification of the interface:

	object spec = {
	    init ~contents(M)

	    before enqueue {
		assert ~contents(msg);
		contents(msg) := true
	    }

	    after empty returns (res:bool) {
		call impl.spec.lemma;
		assert contents(M) -> ~res;
		assert ~res -> exists M. contents(M)
	    }

	    before pick_one {
		assert exists M. contents(M);
		call impl.spec.lemma
	    }

	    after pick_one {
		assert contents(res)
	    }

	    before delete_all  {
		contents(M) := contents(M) & ~(net_msg.num(M) <= seq)
	    }
	}
    
Notice the `pick_one` has a pre-condition that the queue is not empty.








have not
been delivered.




sequence numbers for packets to
provide reliable in-order delivery. In principle the [sequence number
type](seqnum.ivy) should be an unbounded sequence, since we can't put
an upper bound on the number of packets that can be sent. In practice,
though, 64-bit sequnce numbers will be more than enough for the
expected lifetime of the universe. We're going to cheat a bit here and
just *assume* that the sequence numbers don't overflow:

