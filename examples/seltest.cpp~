#include <iostream>
#include <stdlib.h>
#include <sys/types.h>          /* See NOTES */
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h> 
#include <sys/select.h>
#include <string.h>
#include <stdio.h>


class reader {
public:
    virtual int fdes() = 0;
    virtual void read() = 0;
};

class stdin_reader: public reader {
    virtual int fdes(){
        return 0;
    }
    virtual void read() {
        char *buf[256];
        int chars = read(0,buf,256);
        write(1,buf,chars);
    }
}

int main(int argc, char **argv){

    std::vector<reader *> readers;
    readers.push_back(new stdin_reader());

    while(true) {

        fd_set rdfds;
        FD_ZERO(&rdfds);
        for (unsigned i = 0; i < readers.size(); i++) {
            reader *r = readers[i];
            FD_SET(r->fdes(),&rdfds);
        }

        struct timeval timeout;
        timeout.tv_sec = 1;
        timeout.tv_usec = 0;

        int foo = select(dut.sock+1,&rdfds,0,0,&timeout);

        if (foo < 0)
            {perror("select failed"); exit(1);}
        
        if (foo == 0){
            std::cout << "TIMEOUT\n";            
        }
        else {
            for (unsigned i = 0; i < readers.size(); i++) {
                reader *r = readers[i];
                if (FD_ISSET(r->fdes(),&rdfds))
                    r->read();
            }
        }            
    }

    
}
